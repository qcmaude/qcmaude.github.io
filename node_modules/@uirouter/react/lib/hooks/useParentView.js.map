{
  "version": 3,
  "file": "useParentView.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useParentView.ts"
  ],
  "names": [],
  "mappings": ";AAAA,6DAA6D;;AAE7D,+BAA4C;AAC5C,4CAA6D;AAC7D,yCAAwC;AAExC,yFAAyF;AACzF,SAAgB,aAAa;IAC3B,IAAM,MAAM,GAAG,qBAAS,EAAE,CAAC;IAC3B,IAAM,mBAAmB,GAAkB,kBAAU,CAAC,0BAAa,CAAC,CAAC;IACrE,OAAO,eAAO,CAAC;QACb,OAAO,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC;IACvG,CAAC,EAAE,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC;AACpC,CAAC;AAND,sCAMC",
  "sourcesContent": [
    "/** @packageDocumentation @internalapi @module react_hooks */\n\nimport { useContext, useMemo } from 'react';\nimport { UIViewAddress, UIViewContext } from '../components';\nimport { useRouter } from './useRouter';\n\n/** @internalapi Gets the parent UIViewAddress from context, or the root UIViewAddress */\nexport function useParentView(): UIViewAddress {\n  const router = useRouter();\n  const parentUIViewContext: UIViewAddress = useContext(UIViewContext);\n  return useMemo(() => {\n    return parentUIViewContext ? parentUIViewContext : { fqn: '', context: router.stateRegistry.root() };\n  }, [parentUIViewContext, router]);\n}\n"
  ]
}