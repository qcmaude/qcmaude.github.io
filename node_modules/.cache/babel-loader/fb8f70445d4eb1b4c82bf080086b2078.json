{"ast":null,"code":"/** @packageDocumentation @publicapi @module view */\nimport { equals, applyPairs, removeFrom, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\n\nvar ViewService =\n/** @class */\nfunction () {\n  /** @hidden */\n  function ViewService(\n  /** @hidden */\n  router) {\n    var _this = this;\n\n    this.router = router;\n    /** @hidden */\n\n    this._uiViews = [];\n    /** @hidden */\n\n    this._viewConfigs = [];\n    /** @hidden */\n\n    this._viewConfigFactories = {};\n    /** @hidden */\n\n    this._listeners = [];\n    /** @internalapi */\n\n    this._pluginapi = {\n      _rootViewContext: this._rootViewContext.bind(this),\n      _viewConfigFactory: this._viewConfigFactory.bind(this),\n      _registeredUIView: function (id) {\n        return find(_this._uiViews, function (view) {\n          return _this.router.$id + \".\" + view.id === id;\n        });\n      },\n      _registeredUIViews: function () {\n        return _this._uiViews;\n      },\n      _activeViewConfigs: function () {\n        return _this._viewConfigs;\n      },\n      _onSync: function (listener) {\n        _this._listeners.push(listener);\n\n        return function () {\n          return removeFrom(_this._listeners, listener);\n        };\n      }\n    };\n  }\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n\n\n  ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n    if (rawViewName === void 0) {\n      rawViewName = '';\n    } // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\n\n    var viewAtContext = rawViewName.split('@');\n    var uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n\n    var uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\n    var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    } // handle parent relative targeting \"^.^.^\"\n\n\n    var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      var anchorState = uiViewContextAnchor.split('.').reduce(function (anchor, x) {\n        return anchor.parent;\n      }, context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return {\n      uiViewName: uiViewName,\n      uiViewContextAnchor: uiViewContextAnchor\n    };\n  };\n  /** @hidden */\n\n\n  ViewService.prototype._rootViewContext = function (context) {\n    return this._rootContext = context || this._rootContext;\n  };\n  /** @hidden */\n\n\n  ViewService.prototype._viewConfigFactory = function (viewType, factory) {\n    this._viewConfigFactories[viewType] = factory;\n  };\n\n  ViewService.prototype.createViewConfig = function (path, decl) {\n    var cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    var cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  };\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n\n\n  ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  };\n\n  ViewService.prototype.activateViewConfig = function (viewConfig) {\n    trace.traceViewServiceEvent('-> Registering', viewConfig);\n\n    this._viewConfigs.push(viewConfig);\n  };\n\n  ViewService.prototype.sync = function () {\n    var _this = this;\n\n    var uiViewsByFqn = this._uiViews.map(function (uiv) {\n      return [uiv.fqn, uiv];\n    }).reduce(applyPairs, {}); // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n\n\n    function uiViewDepth(uiView) {\n      var stateDepth = function (context) {\n        return context && context.parent ? stateDepth(context.parent) + 1 : 1;\n      };\n\n      return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n    } // Return the ViewConfig's context's depth in the context tree.\n\n\n    function viewConfigDepth(config) {\n      var context = config.viewDecl.$context,\n          count = 0;\n\n      while (++count && context.parent) context = context.parent;\n\n      return count;\n    } // Given a depth function, returns a compare function which can return either ascending or descending order\n\n\n    var depthCompare = curry(function (depthFn, posNeg, left, right) {\n      return posNeg * (depthFn(left) - depthFn(right));\n    });\n\n    var matchingConfigPair = function (uiView) {\n      var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n\n      return {\n        uiView: uiView,\n        viewConfig: matchingConfigs[0]\n      };\n    };\n\n    var configureUIView = function (tuple) {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (_this._uiViews.indexOf(tuple.uiView) !== -1) tuple.uiView.configUpdated(tuple.viewConfig);\n    }; // Sort views by FQN and state depth. Process uiviews nearest the root first.\n\n\n    var uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n\n    var matchedViewConfigs = uiViewTuples.map(function (tuple) {\n      return tuple.viewConfig;\n    });\n\n    var unmatchedConfigTuples = this._viewConfigs.filter(function (config) {\n      return !inArray(matchedViewConfigs, config);\n    }).map(function (viewConfig) {\n      return {\n        uiView: undefined,\n        viewConfig: viewConfig\n      };\n    });\n\n    uiViewTuples.forEach(configureUIView);\n    var allTuples = uiViewTuples.concat(unmatchedConfigTuples);\n\n    this._listeners.forEach(function (cb) {\n      return cb(allTuples);\n    });\n\n    trace.traceViewSync(allTuples);\n  };\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n\n\n  ViewService.prototype.registerUIView = function (uiView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    var uiViews = this._uiViews;\n\n    var fqnAndTypeMatches = function (uiv) {\n      return uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    };\n\n    if (uiViews.filter(fqnAndTypeMatches).length) trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n    uiViews.push(uiView);\n    this.sync();\n    return function () {\n      var idx = uiViews.indexOf(uiView);\n\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n\n\n  ViewService.prototype.available = function () {\n    return this._uiViews.map(prop('fqn'));\n  };\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n\n\n  ViewService.prototype.active = function () {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  };\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internalapi\n   */\n\n\n  ViewService.matches = function (uiViewsByFqn, uiView) {\n    return function (viewConfig) {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false; // Split names apart from both viewConfig and uiView into segments\n\n      var vc = viewConfig.viewDecl;\n      var vcSegments = vc.$uiViewName.split('.');\n      var uivSegments = uiView.fqn.split('.'); // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false; // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\n      var negOffset = 1 - vcSegments.length || undefined;\n      var fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n      var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n  };\n\n  return ViewService;\n}();\n\nexport { ViewService };","map":{"version":3,"sources":["@uirouter/core/view/view.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module view */\nimport { equals, applyPairs, removeFrom, TypedMap, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\nimport { PathNode } from '../path/pathNode';\nimport { ActiveUIView, ViewContext, ViewConfig } from './interface';\nimport { _ViewDeclaration } from '../state/interface';\nimport { UIRouter } from '../router';\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig | ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  /** @param id router.$id + \".\" + uiView.id */\n  _registeredUIView(id: string): ActiveUIView;\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n  _onSync(listener: ViewSyncListener): Function;\n}\n\n// A uiView and its matching viewConfig\nexport interface ViewTuple {\n  uiView: ActiveUIView;\n  viewConfig: ViewConfig;\n}\n\nexport interface ViewSyncListener {\n  (viewTuples: ViewTuple[]): void;\n}\n\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nexport class ViewService {\n  /** @hidden */ private _uiViews: ActiveUIView[] = [];\n  /** @hidden */ private _viewConfigs: ViewConfig[] = [];\n  /** @hidden */ private _rootContext: ViewContext;\n  /** @hidden */ private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n  /** @hidden */ private _listeners: ViewSyncListener[] = [];\n\n  /** @internalapi */\n  public _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIView: (id: string) => find(this._uiViews, view => `${this.router.$id}.${view.id}` === id),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n    _onSync: (listener: ViewSyncListener) => {\n      this._listeners.push(listener);\n      return () => removeFrom(this._listeners, listener);\n    },\n  };\n\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internalapi\n   */\n  static matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    const vc = viewConfig.viewDecl;\n    const vcSegments = vc.$uiViewName.split('.');\n    const uivSegments = uiView.fqn.split('.');\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    const negOffset = 1 - vcSegments.length || undefined;\n    const fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n    const uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  };\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = '') {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    const viewAtContext: string[] = rawViewName.split('@');\n    let uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    const relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    const relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      const anchorState = uiViewContextAnchor.split('.').reduce((anchor, x) => anchor.parent, context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return { uiViewName, uiViewContextAnchor };\n  }\n\n  /** @hidden */\n  constructor(/** @hidden */ private router: UIRouter) {}\n\n  /** @hidden */\n  private _rootViewContext(context?: ViewContext): ViewContext {\n    return (this._rootContext = context || this._rootContext);\n  }\n  /** @hidden */\n  private _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    const cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    const cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('-> Registering', <any>viewConfig);\n    this._viewConfigs.push(viewConfig);\n  }\n\n  sync() {\n    const uiViewsByFqn: TypedMap<ActiveUIView> = this._uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any>{});\n\n    // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n    function uiViewDepth(uiView: ActiveUIView) {\n      const stateDepth = (context: ViewContext) => (context && context.parent ? stateDepth(context.parent) + 1 : 1);\n      return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context,\n        count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = (uiView: ActiveUIView): ViewTuple => {\n      const matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return { uiView, viewConfig: matchingConfigs[0] };\n    };\n\n    const configureUIView = (tuple: ViewTuple) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(tuple.uiView) !== -1) tuple.uiView.configUpdated(tuple.viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n    const matchedViewConfigs = uiViewTuples.map(tuple => tuple.viewConfig);\n    const unmatchedConfigTuples = this._viewConfigs\n      .filter(config => !inArray(matchedViewConfigs, config))\n      .map(viewConfig => ({ uiView: undefined, viewConfig }));\n\n    uiViewTuples.forEach(configureUIView);\n\n    const allTuples: ViewTuple[] = uiViewTuples.concat(unmatchedConfigTuples);\n    this._listeners.forEach(cb => cb(allTuples));\n    trace.traceViewSync(allTuples);\n  }\n\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    const uiViews = this._uiViews;\n    const fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      const idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  }\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this._uiViews.map(prop('fqn'));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}