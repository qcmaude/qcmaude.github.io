{"ast":null,"code":"/** @packageDocumentation @internalapi @module vanilla */\nimport { extend, assertPredicate, isFunction, isArray, isInjectable } from '../common/index'; // globally available injectables\n\nvar globals = {};\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\n\nexport var $injector = {\n  /** Gets an object from DI based on a string token */\n  get: function (name) {\n    return globals[name];\n  },\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: function (name) {\n    return $injector.get(name) != null;\n  },\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: function (fn, context, locals) {\n    var all = extend({}, globals, locals || {});\n    var params = $injector.annotate(fn);\n    var ensureExist = assertPredicate(function (key) {\n      return all.hasOwnProperty(key);\n    }, function (key) {\n      return \"DI can't find injectable: '\" + key + \"'\";\n    });\n    var args = params.filter(ensureExist).map(function (x) {\n      return all[x];\n    });\n    if (isFunction(fn)) return fn.apply(context, args);else return fn.slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: function (fn) {\n    if (!isInjectable(fn)) throw new Error(\"Not an injectable function: \" + fn);\n    if (fn && fn.$inject) return fn.$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  }\n};","map":{"version":3,"sources":["@uirouter/core/vanilla/injector.ts"],"names":[],"mappings":"AAAA;AACA,SACE,MADF,EAEE,eAFF,EAGE,UAHF,EAIE,OAJF,EAKE,YALF,QAQO,iBARP,C,CAUA;;AACA,IAAM,OAAO,GAAG,EAAhB;AACA,IAAM,cAAc,GAAG,kCAAvB;AACA,IAAM,cAAc,GAAG,YAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;;AACH,OAAO,IAAM,SAAS,GAAG;AACvB;AACA,EAAA,GAAG,EAAE,UAAA,IAAA,EAAI;AAAI,WAAA,OAAO,CAAP,IAAO,CAAP;AAAa,GAFH;;AAIvB;AACA,EAAA,GAAG,EAAE,UAAA,IAAA,EAAI;AAAI,WAAA,SAAS,CAAC,GAAV,CAAc,IAAd,KAAA,IAAA;AAA2B,GALjB;;AAOvB;;;;;;AAMG;AACH,EAAA,MAAM,EAAE,UAAC,EAAD,EAAkB,OAAlB,EAA4B,MAA5B,EAAmC;AACzC,QAAM,GAAG,GAAG,MAAM,CAAC,EAAD,EAAK,OAAL,EAAc,MAAM,IAAI,EAAxB,CAAlB;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,QAAV,CAAmB,EAAnB,CAAf;AACA,QAAM,WAAW,GAAG,eAAe,CACjC,UAAC,GAAD,EAAY;AAAK,aAAA,GAAG,CAAC,cAAJ,CAAA,GAAA,CAAA;AAAuB,KADP,EAEjC,UAAA,GAAA,EAAG;AAAI,aAAA,gCAA8B,GAA9B,GAAA,GAAA;AAAoC,KAFV,CAAnC;AAIA,QAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,WAAd,EAA2B,GAA3B,CAA+B,UAAA,CAAA,EAAC;AAAI,aAAA,GAAG,CAAH,CAAG,CAAH;AAAM,KAA1C,CAAb;AACA,QAAI,UAAU,CAAC,EAAD,CAAd,EAAoB,OAAO,EAAE,CAAC,KAAH,CAAS,OAAT,EAAkB,IAAlB,CAAP,CAApB,KACK,OAAQ,EAAY,CAAC,KAAb,CAAmB,CAAC,CAApB,EAAuB,CAAvB,EAA0B,KAA1B,CAAgC,OAAhC,EAAyC,IAAzC,CAAR;AACN,GAxBsB;;AA0BvB;;;;;AAKG;AACH,EAAA,QAAQ,EAAE,UAAC,EAAD,EAAgB;AACxB,QAAI,CAAC,YAAY,CAAC,EAAD,CAAjB,EAAuB,MAAM,IAAI,KAAJ,CAAU,iCAA+B,EAAzC,CAAN;AACvB,QAAI,EAAE,IAAK,EAAU,CAAC,OAAtB,EAA+B,OAAQ,EAAU,CAAC,OAAnB;AAC/B,QAAI,OAAO,CAAC,EAAD,CAAX,EAAiB,OAAO,EAAE,CAAC,KAAH,CAAS,CAAT,EAAY,CAAC,CAAb,CAAP;AACjB,QAAM,KAAK,GAAG,EAAE,CAAC,QAAH,GAAc,OAAd,CAAsB,cAAtB,EAAsC,EAAtC,CAAd;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAN,CAAc,GAAd,IAAqB,CAAjC,EAAoC,KAAK,CAAC,OAAN,CAAc,GAAd,CAApC,EAAwD,KAAxD,CAA8D,cAA9D,CAAf;AACA,WAAO,MAAM,IAAI,EAAjB;AACD;AAvCsB,CAAlB","sourcesContent":["/** @packageDocumentation @internalapi @module vanilla */\nimport {\n  extend,\n  assertPredicate,\n  isFunction,\n  isArray,\n  isInjectable,\n  $InjectorLike,\n  IInjectable,\n} from '../common/index';\n\n// globally available injectables\nconst globals = {};\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport const $injector = {\n  /** Gets an object from DI based on a string token */\n  get: name => globals[name],\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: name => $injector.get(name) != null,\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: (fn: IInjectable, context?, locals?) => {\n    const all = extend({}, globals, locals || {});\n    const params = $injector.annotate(fn);\n    const ensureExist = assertPredicate(\n      (key: string) => all.hasOwnProperty(key),\n      key => `DI can't find injectable: '${key}'`\n    );\n    const args = params.filter(ensureExist).map(x => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: (fn: IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    const fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    const result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  },\n} as $InjectorLike;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}