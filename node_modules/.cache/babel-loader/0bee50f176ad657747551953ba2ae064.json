{"ast":null,"code":"/** @packageDocumentation @internalapi @module vanilla */\nimport { deregAll, isDefined, removeFrom, root } from '../common';\nimport { buildUrl, getParams, parseUrl } from './utils';\n/** A base `LocationServices` */\n\nvar BaseLocationServices =\n/** @class */\nfunction () {\n  function BaseLocationServices(router, fireAfterUpdate) {\n    var _this = this;\n\n    this.fireAfterUpdate = fireAfterUpdate;\n    this._listeners = [];\n\n    this._listener = function (evt) {\n      return _this._listeners.forEach(function (cb) {\n        return cb(evt);\n      });\n    };\n\n    this.hash = function () {\n      return parseUrl(_this._get()).hash;\n    };\n\n    this.path = function () {\n      return parseUrl(_this._get()).path;\n    };\n\n    this.search = function () {\n      return getParams(parseUrl(_this._get()).search);\n    };\n\n    this._location = root.location;\n    this._history = root.history;\n  }\n\n  BaseLocationServices.prototype.url = function (url, replace) {\n    if (replace === void 0) {\n      replace = true;\n    }\n\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        this._listeners.forEach(function (cb) {\n          return cb({\n            url: url\n          });\n        });\n      }\n    }\n\n    return buildUrl(this);\n  };\n\n  BaseLocationServices.prototype.onChange = function (cb) {\n    var _this = this;\n\n    this._listeners.push(cb);\n\n    return function () {\n      return removeFrom(_this._listeners, cb);\n    };\n  };\n\n  BaseLocationServices.prototype.dispose = function (router) {\n    deregAll(this._listeners);\n  };\n\n  return BaseLocationServices;\n}();\n\nexport { BaseLocationServices };","map":{"version":3,"sources":["@uirouter/core/vanilla/baseLocationService.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,QAAT,EAAmB,SAAnB,EAAgD,UAAhD,EAA4D,IAA5D,QAAwE,WAAxE;AAIA,SAAS,QAAT,EAAmB,SAAnB,EAA8B,QAA9B,QAA8C,SAA9C;AAEA;;AACA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAOE,WAAA,oBAAA,CAAY,MAAZ,EAAqC,eAArC,EAA6D;AAA7D,QAAA,KAAA,GAAA,IAAA;;AAAqC,SAAA,eAAA,GAAA,eAAA;AAN7B,SAAA,UAAA,GAAyB,EAAzB;;AAIR,SAAA,SAAA,GAAY,UAAA,GAAA,EAAG;AAAI,aAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,UAAA,EAAA,EAAE;AAAI,eAAA,EAAE,CAAF,GAAE,CAAF;AAA9B,OAAA,CAAA;AAAsC,KAAzD;;AAkCA,SAAA,IAAA,GAAO,YAAA;AAAM,aAAA,QAAQ,CAAC,KAAI,CAAC,IAAL,EAAD,CAAR,CAAA,IAAA;AAA0B,KAAvC;;AACA,SAAA,IAAA,GAAO,YAAA;AAAM,aAAA,QAAQ,CAAC,KAAI,CAAC,IAAL,EAAD,CAAR,CAAA,IAAA;AAA0B,KAAvC;;AACA,SAAA,MAAA,GAAS,YAAA;AAAM,aAAA,SAAS,CAAC,QAAQ,CAAC,KAAI,CAAC,IAAL,EAAD,CAAR,CAAV,MAAS,CAAT;AAAuC,KAAtD;;AAjCE,SAAK,SAAL,GAAiB,IAAI,CAAC,QAAtB;AACA,SAAK,QAAL,GAAgB,IAAI,CAAC,OAArB;AACD;;AAiCD,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAkB,OAAlB,EAAgC;AAAd,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,IAAA;AAAc;;AAC9B,QAAI,SAAS,CAAC,GAAD,CAAT,IAAkB,GAAG,KAAK,KAAK,IAAL,EAA9B,EAA2C;AACzC,WAAK,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,GAAtB,EAA2B,OAA3B;;AAEA,UAAI,KAAK,eAAT,EAA0B;AACxB,aAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAA,EAAA,EAAE;AAAI,iBAAA,EAAE,CAAC;AAAE,YAAA,GAAG,EAAR;AAAG,WAAD,CAAF;AAAW,SAAzC;AACD;AACF;;AAED,WAAO,QAAQ,CAAC,IAAD,CAAf;AACD,GAVD;;AAYA,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,EAAT,EAA0B;AAA1B,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,UAAL,CAAgB,IAAhB,CAAqB,EAArB;;AACA,WAAO,YAAA;AAAM,aAAA,UAAU,CAAC,KAAI,CAAC,UAAN,EAAV,EAAU,CAAV;AAA+B,KAA5C;AACD,GAHD;;AAKA,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAAwB;AACtB,IAAA,QAAQ,CAAC,KAAK,UAAN,CAAR;AACD,GAFD;;AAGF,SAAA,oBAAA;AAAC,CA/DD,EAAA","sourcesContent":["/** @packageDocumentation @internalapi @module vanilla */\nimport { deregAll, isDefined, LocationServices, removeFrom, root } from '../common';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { HistoryLike, LocationLike } from './interface';\nimport { buildUrl, getParams, parseUrl } from './utils';\n\n/** A base `LocationServices` */\nexport abstract class BaseLocationServices implements LocationServices, Disposable {\n  private _listeners: Function[] = [];\n  _location: LocationLike;\n  _history: HistoryLike;\n\n  _listener = evt => this._listeners.forEach(cb => cb(evt));\n\n  constructor(router: UIRouter, public fireAfterUpdate: boolean) {\n    this._location = root.location;\n    this._history = root.history;\n  }\n\n  /**\n   * This should return the current internal URL representation.\n   *\n   * The internal URL includes only the portion that UI-Router matches.\n   * It does not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   */\n  protected abstract _get(): string;\n\n  /**\n   * This should set the current URL.\n   *\n   * The `url` param should include only the portion that UI-Router matches on.\n   * It should not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   *\n   * However, after this function completes, the browser URL should reflect the entire (fully qualified)\n   * HREF including those data.\n   */\n  protected abstract _set(state: any, title: string, url: string, replace: boolean);\n\n  hash = () => parseUrl(this._get()).hash;\n  path = () => parseUrl(this._get()).path;\n  search = () => getParams(parseUrl(this._get()).search);\n\n  url(url?: string, replace = true): string {\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        this._listeners.forEach(cb => cb({ url }));\n      }\n    }\n\n    return buildUrl(this);\n  }\n\n  onChange(cb: EventListener) {\n    this._listeners.push(cb);\n    return () => removeFrom(this._listeners, cb);\n  }\n\n  dispose(router: UIRouter) {\n    deregAll(this._listeners);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}