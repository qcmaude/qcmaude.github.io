{"ast":null,"code":"/** @packageDocumentation @publicapi @module url */\nimport { stripLastPathElement } from '../common';\nimport { UrlRuleFactory } from './urlRule';\n/** @hidden */\n\nfunction appendBasePath(url, isHtml5, absolute, baseHref) {\n  if (baseHref === '/') return url;\n  if (isHtml5) return stripLastPathElement(baseHref) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRules]] which can be found as [[UrlService.rules]].\n *\n * @internalapi\n */\n\n\nvar UrlRouter =\n/** @class */\nfunction () {\n  /** @hidden */\n  function UrlRouter(\n  /** @hidden */\n  router) {\n    var _this = this;\n\n    this.router = router; // Delegate these calls to [[UrlService]]\n\n    /** @deprecated use [[UrlService.sync]]*/\n\n    this.sync = function (evt) {\n      return _this.router.urlService.sync(evt);\n    };\n    /** @deprecated use [[UrlService.listen]]*/\n\n\n    this.listen = function (enabled) {\n      return _this.router.urlService.listen(enabled);\n    };\n    /** @deprecated use [[UrlService.deferIntercept]]*/\n\n\n    this.deferIntercept = function (defer) {\n      return _this.router.urlService.deferIntercept(defer);\n    };\n    /** @deprecated use [[UrlService.match]]*/\n\n\n    this.match = function (urlParts) {\n      return _this.router.urlService.match(urlParts);\n    }; // Delegate these calls to [[UrlRules]]\n\n    /** @deprecated use [[UrlRules.initial]]*/\n\n\n    this.initial = function (handler) {\n      return _this.router.urlService.rules.initial(handler);\n    };\n    /** @deprecated use [[UrlRules.otherwise]]*/\n\n\n    this.otherwise = function (handler) {\n      return _this.router.urlService.rules.otherwise(handler);\n    };\n    /** @deprecated use [[UrlRules.removeRule]]*/\n\n\n    this.removeRule = function (rule) {\n      return _this.router.urlService.rules.removeRule(rule);\n    };\n    /** @deprecated use [[UrlRules.rule]]*/\n\n\n    this.rule = function (rule) {\n      return _this.router.urlService.rules.rule(rule);\n    };\n    /** @deprecated use [[UrlRules.rules]]*/\n\n\n    this.rules = function () {\n      return _this.router.urlService.rules.rules();\n    };\n    /** @deprecated use [[UrlRules.sort]]*/\n\n\n    this.sort = function (compareFn) {\n      return _this.router.urlService.rules.sort(compareFn);\n    };\n    /** @deprecated use [[UrlRules.when]]*/\n\n\n    this.when = function (matcher, handler, options) {\n      return _this.router.urlService.rules.when(matcher, handler, options);\n    };\n\n    this.urlRuleFactory = new UrlRuleFactory(router);\n  }\n  /**\n   * Internal API.\n   * @internalapi\n   */\n\n\n  UrlRouter.prototype.update = function (read) {\n    var $url = this.router.locationService;\n\n    if (read) {\n      this.location = $url.url();\n      return;\n    }\n\n    if ($url.url() === this.location) return;\n    $url.url(this.location, true);\n  };\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internalapi\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n\n\n  UrlRouter.prototype.push = function (urlMatcher, params, options) {\n    var replace = options && !!options.replace;\n    this.router.urlService.url(urlMatcher.format(params || {}), replace);\n  };\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n\n\n  UrlRouter.prototype.href = function (urlMatcher, params, options) {\n    var url = urlMatcher.format(params);\n    if (url == null) return null;\n    options = options || {\n      absolute: false\n    };\n    var cfg = this.router.urlService.config;\n    var isHtml5 = cfg.html5Mode();\n\n    if (!isHtml5 && url !== null) {\n      url = '#' + cfg.hashPrefix() + url;\n    }\n\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    var slash = !isHtml5 && url ? '/' : '';\n    var cfgPort = cfg.port();\n    var port = cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort;\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  };\n\n  Object.defineProperty(UrlRouter.prototype, \"interceptDeferred\", {\n    /** @deprecated use [[UrlService.interceptDeferred]]*/\n    get: function () {\n      return this.router.urlService.interceptDeferred;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return UrlRouter;\n}();\n\nexport { UrlRouter };","map":{"version":3,"sources":["@uirouter/core/url/urlRouter.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module url */\nimport { stripLastPathElement } from '../common';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params';\nimport { UIRouter } from '../router';\nimport { UrlRuleFactory } from './urlRule';\nimport { MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn } from './interface';\nimport { TargetState, TargetStateDef } from '../state';\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return stripLastPathElement(baseHref) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRules]] which can be found as [[UrlService.rules]].\n *\n * @internalapi\n */\nexport class UrlRouter {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n  /** @hidden */ private location: string;\n\n  /** @hidden */\n  constructor(/** @hidden */ private router: UIRouter) {\n    this.urlRuleFactory = new UrlRuleFactory(router);\n  }\n\n  /**\n   * Internal API.\n   * @internalapi\n   */\n  update(read?: boolean) {\n    const $url = this.router.locationService;\n    if (read) {\n      this.location = $url.url();\n      return;\n    }\n    if ($url.url() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internalapi\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: string | boolean }) {\n    const replace = options && !!options.replace;\n    this.router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let url = urlMatcher.format(params);\n    if (url == null) return null;\n\n    options = options || { absolute: false };\n\n    const cfg = this.router.urlService.config;\n    const isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = '#' + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    const slash = !isHtml5 && url ? '/' : '';\n    const cfgPort = cfg.port();\n    const port = <any>(cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n\n  // Delegate these calls to [[UrlService]]\n  /** @deprecated use [[UrlService.sync]]*/\n  public sync = (evt?) => this.router.urlService.sync(evt);\n  /** @deprecated use [[UrlService.listen]]*/\n  public listen = (enabled?: boolean): Function => this.router.urlService.listen(enabled);\n  /** @deprecated use [[UrlService.deferIntercept]]*/\n  public deferIntercept = (defer?: boolean) => this.router.urlService.deferIntercept(defer);\n  /** @deprecated use [[UrlService.interceptDeferred]]*/\n  public get interceptDeferred() {\n    return this.router.urlService.interceptDeferred;\n  }\n  /** @deprecated use [[UrlService.match]]*/\n  public match = (urlParts: UrlParts): MatchResult => this.router.urlService.match(urlParts);\n\n  // Delegate these calls to [[UrlRules]]\n  /** @deprecated use [[UrlRules.initial]]*/\n  public initial = (handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef): void =>\n    this.router.urlService.rules.initial(handler);\n  /** @deprecated use [[UrlRules.otherwise]]*/\n  public otherwise = (handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef): void =>\n    this.router.urlService.rules.otherwise(handler);\n  /** @deprecated use [[UrlRules.removeRule]]*/\n  public removeRule = (rule: UrlRule): void => this.router.urlService.rules.removeRule(rule);\n  /** @deprecated use [[UrlRules.rule]]*/\n  public rule = (rule: UrlRule): Function => this.router.urlService.rules.rule(rule);\n  /** @deprecated use [[UrlRules.rules]]*/\n  public rules = (): UrlRule[] => this.router.urlService.rules.rules();\n  /** @deprecated use [[UrlRules.sort]]*/\n  public sort = (compareFn?: (a: UrlRule, b: UrlRule) => number) => this.router.urlService.rules.sort(compareFn);\n  /** @deprecated use [[UrlRules.when]]*/\n  public when = (\n    matcher: RegExp | UrlMatcher | string,\n    handler: string | UrlRuleHandlerFn,\n    options?: { priority: number }\n  ): UrlRule => this.router.urlService.rules.when(matcher, handler, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}