{"ast":null,"code":"/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation @module common_strings\n */\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\n\nexport function maxLength(max, str) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\n\nexport function padString(length, str) {\n  while (str.length < length) str += ' ';\n\n  return str;\n}\nexport function kebobString(camelCase) {\n  return camelCase.replace(/^([A-Z])/, function ($1) {\n    return $1.toLowerCase();\n  }) // replace first char\n  .replace(/([A-Z])/g, function ($1) {\n    return '-' + $1.toLowerCase();\n  }); // replace rest\n}\nexport function functionToString(fn) {\n  var fnStr = fnToString(fn);\n  var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n  var fnName = fn['name'] || '';\n\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n\n  return toStr;\n}\nexport function fnToString(fn) {\n  var _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n\n  return _fn && _fn.toString() || 'undefined';\n}\nvar isRejection = Rejection.isRejectionPromise;\n\nvar hasToString = function (obj) {\n  return isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n};\n\nvar stringifyPattern = pattern([[isUndefined, val('undefined')], [isNull, val('null')], [isPromise, val('[Promise]')], [isRejection, function (x) {\n  return x._transitionRejection.toString();\n}], [hasToString, function (x) {\n  return x.toString();\n}], [isInjectable, functionToString], [val(true), identity]]);\nexport function stringify(o) {\n  var seen = [];\n\n  function format(value) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, function (key, value) {\n    return format(value);\n  }).replace(/\\\\\"/g, '\"');\n}\n/** Returns a function that splits a string on a character or substring */\n\nexport var beforeAfterSubstr = function (char) {\n  return function (str) {\n    if (!str) return ['', ''];\n    var idx = str.indexOf(char);\n    if (idx === -1) return [str, ''];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n  };\n};\nexport var hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport var stripLastPathElement = function (str) {\n  return str.replace(/\\/[^/]*$/, '');\n};\nexport var splitHash = beforeAfterSubstr('#');\nexport var splitQuery = beforeAfterSubstr('?');\nexport var splitEqual = beforeAfterSubstr('=');\nexport var trimHashVal = function (str) {\n  return str ? str.replace(/^#/, '') : '';\n};\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\n\nexport function splitOnDelim(delim) {\n  var re = new RegExp('(' + delim + ')', 'g');\n  return function (str) {\n    return str.split(re).filter(identity);\n  };\n}\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\n\nexport function joinNeighborsR(acc, x) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}","map":{"version":3,"sources":["@uirouter/core/common/strings.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation @module common_strings\n */\n\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, IInjectable, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += ' ';\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n    .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n    .replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase()); // replace rest\n}\n\nexport function functionToString(fn: Function) {\n  const fnStr = fnToString(fn);\n  const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  const fnName = fn['name'] || '';\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  const _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return (_fn && _fn.toString()) || 'undefined';\n}\n\nconst isRejection = Rejection.isRejectionPromise;\nconst hasToString = (obj: any) =>\n  isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n\nconst stringifyPattern = pattern([\n  [isUndefined, val('undefined')],\n  [isNull, val('null')],\n  [isPromise, val('[Promise]')],\n  [isRejection, (x: any) => x._transitionRejection.toString()],\n  [hasToString, (x: object) => x.toString()],\n  [isInjectable, functionToString],\n  [val(true), identity],\n]) as (val: any) => string;\n\nexport function stringify(o: any) {\n  const seen: any[] = [];\n\n  function format(value: any) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string): string[] => {\n  if (!str) return ['', ''];\n  const idx = str.indexOf(char);\n  if (idx === -1) return [str, ''];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nexport const hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport const stripLastPathElement = (str: string) => str.replace(/\\/[^/]*$/, '');\nexport const splitHash = beforeAfterSubstr('#');\nexport const splitQuery = beforeAfterSubstr('?');\nexport const splitEqual = beforeAfterSubstr('=');\nexport const trimHashVal = (str: string) => (str ? str.replace(/^#/, '') : '');\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  const re = new RegExp('(' + delim + ')', 'g');\n  return (str: string) => str.split(re).filter(identity);\n}\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}