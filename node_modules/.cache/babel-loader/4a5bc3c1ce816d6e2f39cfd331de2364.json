{"ast":null,"code":"/** @packageDocumentation @publicapi @module transition */\n'use strict';\n\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\nvar RejectType;\n\n(function (RejectType) {\n  /**\n   * A new transition superseded this one.\n   *\n   * While this transition was running, a new transition started.\n   * This transition is cancelled because it was superseded by new transition.\n   */\n  RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n  /**\n   * The transition was aborted\n   *\n   * The transition was aborted by a hook which returned `false`\n   */\n\n  RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n  /**\n   * The transition was invalid\n   *\n   * The transition was never started because it was invalid\n   */\n\n  RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n  /**\n   * The transition was ignored\n   *\n   * The transition was ignored because it would have no effect.\n   *\n   * Either:\n   *\n   * - The transition is targeting the current state and parameter values\n   * - The transition is targeting the same state and parameter values as the currently running transition.\n   */\n\n  RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n  /**\n   * The transition errored.\n   *\n   * This generally means a hook threw an error or returned a rejected promise\n   */\n\n  RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n})(RejectType || (RejectType = {}));\n\nexport { RejectType };\n/** @hidden */\n\nvar id = 0;\n\nvar Rejection =\n/** @class */\nfunction () {\n  function Rejection(type, message, detail) {\n    /** @hidden */\n    this.$id = id++;\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n\n\n  Rejection.isRejectionPromise = function (obj) {\n    return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n  };\n  /** Returns a Rejection due to transition superseded */\n\n\n  Rejection.superseded = function (detail, options) {\n    var message = 'The transition has been superseded by a different transition';\n    var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n\n    return rejection;\n  };\n  /** Returns a Rejection due to redirected transition */\n\n\n  Rejection.redirected = function (detail) {\n    return Rejection.superseded(detail, {\n      redirected: true\n    });\n  };\n  /** Returns a Rejection due to invalid transition */\n\n\n  Rejection.invalid = function (detail) {\n    var message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  };\n  /** Returns a Rejection due to ignored transition */\n\n\n  Rejection.ignored = function (detail) {\n    var message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  };\n  /** Returns a Rejection due to aborted transition */\n\n\n  Rejection.aborted = function (detail) {\n    var message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  };\n  /** Returns a Rejection due to aborted transition */\n\n\n  Rejection.errored = function (detail) {\n    var message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  };\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n\n\n  Rejection.normalize = function (detail) {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  };\n\n  Rejection.prototype.toString = function () {\n    var detailString = function (d) {\n      return d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    };\n\n    var detail = detailString(this.detail);\n\n    var _a = this,\n        $id = _a.$id,\n        type = _a.type,\n        message = _a.message;\n\n    return \"Transition Rejection($id: \" + $id + \" type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n  };\n\n  Rejection.prototype.toPromise = function () {\n    return extend(silentRejection(this), {\n      _transitionRejection: this\n    });\n  };\n\n  return Rejection;\n}();\n\nexport { Rejection };","map":{"version":3,"sources":["@uirouter/core/transition/rejectFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module transition */\n'use strict';\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\n\nenum RejectType {\n  /**\n   * A new transition superseded this one.\n   *\n   * While this transition was running, a new transition started.\n   * This transition is cancelled because it was superseded by new transition.\n   */\n  SUPERSEDED = 2,\n\n  /**\n   * The transition was aborted\n   *\n   * The transition was aborted by a hook which returned `false`\n   */\n  ABORTED = 3,\n\n  /**\n   * The transition was invalid\n   *\n   * The transition was never started because it was invalid\n   */\n  INVALID = 4,\n\n  /**\n   * The transition was ignored\n   *\n   * The transition was ignored because it would have no effect.\n   *\n   * Either:\n   *\n   * - The transition is targeting the current state and parameter values\n   * - The transition is targeting the same state and parameter values as the currently running transition.\n   */\n  IGNORED = 5,\n\n  /**\n   * The transition errored.\n   *\n   * This generally means a hook threw an error or returned a rejected promise\n   */\n  ERROR = 6,\n}\n\nexport { RejectType };\n\n/** @hidden */\nlet id = 0;\n\nexport class Rejection {\n  /** @hidden */\n  $id = id++;\n  /**\n   * The type of the rejection.\n   *\n   * This value is an number representing the type of transition rejection.\n   * If using Typescript, this is a Typescript enum.\n   *\n   * - [[RejectType.SUPERSEDED]] (`2`)\n   * - [[RejectType.ABORTED]] (`3`)\n   * - [[RejectType.INVALID]] (`4`)\n   * - [[RejectType.IGNORED]] (`5`)\n   * - [[RejectType.ERROR]] (`6`)\n   *\n   */\n  type: RejectType;\n\n  /**\n   * A message describing the rejection\n   */\n  message: string;\n\n  /**\n   * A detail object\n   *\n   * This value varies based on the mechanism for rejecting the transition.\n   * For example, if an error was thrown from a hook, the `detail` will be the `Error` object.\n   * If a hook returned a rejected promise, the `detail` will be the rejected value.\n   */\n  detail: any;\n\n  /**\n   * Indicates if the transition was redirected.\n   *\n   * When a transition is redirected, the rejection [[type]] will be [[RejectType.SUPERSEDED]] and this flag will be true.\n   */\n  redirected: boolean;\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isRejectionPromise(obj: any): boolean {\n    return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n  }\n\n  /** Returns a Rejection due to transition superseded */\n  static superseded(detail?: any, options?: any): Rejection {\n    const message = 'The transition has been superseded by a different transition';\n    const rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a Rejection due to redirected transition */\n  static redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n\n  /** Returns a Rejection due to invalid transition */\n  static invalid(detail?: any): Rejection {\n    const message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a Rejection due to ignored transition */\n  static ignored(detail?: any): Rejection {\n    const message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static aborted(detail?: any): Rejection {\n    const message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static errored(detail?: any): Rejection {\n    const message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n  static normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => (d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d));\n    const detail = detailString(this.detail);\n    const { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}