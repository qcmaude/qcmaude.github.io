{"ast":null,"code":"/** @packageDocumentation @internalapi @module hooks */\nimport { isString, isFunction } from '../common/predicates';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\n\nvar redirectToHook = function (trans) {\n  var redirect = trans.to().redirectTo;\n  if (!redirect) return;\n  var $state = trans.router.stateService;\n\n  function handleResult(result) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(result, trans.params(), trans.options());\n    if (result['state'] || result['params']) return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n\n  return handleResult(redirect);\n};\n\nexport var registerRedirectToHook = function (transitionService) {\n  return transitionService.onStart({\n    to: function (state) {\n      return !!state.redirectTo;\n    }\n  }, redirectToHook);\n};","map":{"version":3,"sources":["@uirouter/core/hooks/redirectTo.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,QAAT,EAAmB,UAAnB,QAAqC,sBAArC;AAEA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,WAAT,QAA4B,sBAA5B;AAIA;;;;;;AAMG;;AACH,IAAM,cAAc,GAAqB,UAAC,KAAD,EAAkB;AACzD,MAAM,QAAQ,GAAG,KAAK,CAAC,EAAN,GAAW,UAA5B;AACA,MAAI,CAAC,QAAL,EAAe;AAEf,MAAM,MAAM,GAAG,KAAK,CAAC,MAAN,CAAa,YAA5B;;AAEA,WAAS,YAAT,CAAsB,MAAtB,EAAiC;AAC/B,QAAI,CAAC,MAAL,EAAa;AACb,QAAI,MAAM,YAAY,WAAtB,EAAmC,OAAO,MAAP;AACnC,QAAI,QAAQ,CAAC,MAAD,CAAZ,EAAsB,OAAO,MAAM,CAAC,MAAP,CAAmB,MAAnB,EAA2B,KAAK,CAAC,MAAN,EAA3B,EAA2C,KAAK,CAAC,OAAN,EAA3C,CAAP;AACtB,QAAI,MAAM,CAAC,OAAD,CAAN,IAAmB,MAAM,CAAC,QAAD,CAA7B,EACE,OAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,OAAD,CAAN,IAAmB,KAAK,CAAC,EAAN,EAAjC,EAA6C,MAAM,CAAC,QAAD,CAAN,IAAoB,KAAK,CAAC,MAAN,EAAjE,EAAiF,KAAK,CAAC,OAAN,EAAjF,CAAP;AACH;;AAED,MAAI,UAAU,CAAC,QAAD,CAAd,EAA0B;AACxB,WAAO,QAAQ,CAAC,EAAT,CAAY,IAAZ,CAAiB,QAAQ,CAAC,KAAD,CAAzB,EAAkC,IAAlC,CAAuC,YAAvC,CAAP;AACD;;AACD,SAAO,YAAY,CAAC,QAAD,CAAnB;AACD,CAlBD;;AAoBA,OAAO,IAAM,sBAAsB,GAAG,UAAC,iBAAD,EAAqC;AACzE,SAAA,iBAAiB,CAAC,OAAlB,CAA0B;AAAE,IAAA,EAAE,EAAE,UAAA,KAAA,EAAK;AAAI,aAAA,CAAC,CAAC,KAAK,CAAP,UAAA;AAAkB;AAAjC,GAA1B,EAA+D,cAA/D,CAAA;AAA8E,CADzE","sourcesContent":["/** @packageDocumentation @internalapi @module hooks */\nimport { isString, isFunction } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  const redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  const $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any>result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n  transitionService.onStart({ to: state => !!state.redirectTo }, redirectToHook);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}