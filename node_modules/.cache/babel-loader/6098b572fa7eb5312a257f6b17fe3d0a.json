{"ast":null,"code":"/** @packageDocumentation @internalapi @module vanilla */\nimport { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\nexport function servicesPlugin(router) {\n  services.$injector = $injector;\n  services.$q = $q;\n  return {\n    name: 'vanilla.services',\n    $q: $q,\n    $injector: $injector,\n    dispose: function () {\n      return null;\n    }\n  };\n}\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\n\nexport var hashLocationPlugin = locationPluginFactory('vanilla.hashBangLocation', false, HashLocationService, BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\n\nexport var pushStateLocationPlugin = locationPluginFactory('vanilla.pushStateLocation', true, PushStateLocationService, BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\n\nexport var memoryLocationPlugin = locationPluginFactory('vanilla.memoryLocation', false, MemoryLocationService, MemoryLocationConfig);","map":{"version":3,"sources":["@uirouter/core/vanilla/plugins.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,qBAAT,QAAsC,SAAtC;AAGA,SAAS,wBAAT,QAAyC,4BAAzC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,SAAT,QAA0B,YAA1B;AACA,SAAS,EAAT,QAAmB,KAAnB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAEA,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAyC;AAC7C,EAAA,QAAQ,CAAC,SAAT,GAAqB,SAArB;AACA,EAAA,QAAQ,CAAC,EAAT,GAAc,EAAd;AAEA,SAAO;AAAE,IAAA,IAAI,EAAE,kBAAR;AAA4B,IAAA,EAAE,EAAA,EAA9B;AAAgC,IAAA,SAAS,EAAA,SAAzC;AAA2C,IAAA,OAAO,EAAE,YAAA;AAAM,aAAA,IAAA;AAAI;AAA9D,GAAP;AACD;AAED;;AACA,OAAO,IAAM,kBAAkB,GAAyC,qBAAqB,CAC3F,0BAD2F,EAE3F,KAF2F,EAG3F,mBAH2F,EAI3F,qBAJ2F,CAAtF;AAOP;;AACA,OAAO,IAAM,uBAAuB,GAAyC,qBAAqB,CAChG,2BADgG,EAEhG,IAFgG,EAGhG,wBAHgG,EAIhG,qBAJgG,CAA3F;AAOP;;AACA,OAAO,IAAM,oBAAoB,GAAyC,qBAAqB,CAC7F,wBAD6F,EAE7F,KAF6F,EAG7F,qBAH6F,EAI7F,oBAJ6F,CAAxF","sourcesContent":["/** @packageDocumentation @internalapi @module vanilla */\nimport { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { LocationPlugin, ServicesPlugin } from './interface';\nimport { UIRouter } from '../router';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\n\nexport function servicesPlugin(router: UIRouter): ServicesPlugin {\n  services.$injector = $injector;\n  services.$q = $q;\n\n  return { name: 'vanilla.services', $q, $injector, dispose: () => null };\n}\n\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport const hashLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.hashBangLocation',\n  false,\n  HashLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport const pushStateLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.pushStateLocation',\n  true,\n  PushStateLocationService,\n  BrowserLocationConfig\n);\n\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport const memoryLocationPlugin: (router: UIRouter) => LocationPlugin = locationPluginFactory(\n  'vanilla.memoryLocation',\n  false,\n  MemoryLocationService,\n  MemoryLocationConfig\n);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}