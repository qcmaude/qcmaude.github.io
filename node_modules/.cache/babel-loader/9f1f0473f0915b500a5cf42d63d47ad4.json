{"ast":null,"code":"/** @packageDocumentation @publicapi @module transition */\nimport { TransitionHookScope, TransitionHookPhase } from './interface';\nimport { Transition } from './transition';\nimport { makeEvent } from './hookRegistry';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\n\nexport var defaultTransOpts = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: function () {\n    return null;\n  },\n  source: 'unknown'\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\n\nvar TransitionService =\n/** @class */\nfunction () {\n  /** @hidden */\n  function TransitionService(_router) {\n    /** @hidden */\n    this._transitionCount = 0;\n    /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n\n    this._eventTypes = [];\n    /** @hidden The registered transition hooks */\n\n    this._registeredHooks = {};\n    /** @hidden The  paths on a criteria object */\n\n    this._criteriaPaths = {};\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = {};\n    this._pluginapi = createProxyFunctions(val(this), {}, val(this), ['_definePathType', '_defineEvent', '_getPathTypes', '_getEvents', 'getHooks']);\n\n    this._defineCorePaths();\n\n    this._defineCoreEvents();\n\n    this._registerCoreTransitionHooks();\n\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internalapi\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n\n\n  TransitionService.prototype.onCreate = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onBefore = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onStart = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onExit = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onRetain = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onEnter = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onFinish = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onSuccess = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onError = function (criteria, callback, options) {\n    return;\n  };\n  /**\n   * dispose\n   * @internalapi\n   */\n\n\n  TransitionService.prototype.dispose = function (router) {\n    values(this._registeredHooks).forEach(function (hooksArray) {\n      return hooksArray.forEach(function (hook) {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      });\n    });\n  };\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n\n\n  TransitionService.prototype.create = function (fromPath, targetState) {\n    return new Transition(fromPath, targetState, this._router);\n  };\n  /** @hidden */\n\n\n  TransitionService.prototype._defineCoreEvents = function () {\n    var Phase = TransitionHookPhase;\n    var TH = TransitionHook;\n    var paths = this._criteriaPaths;\n    var NORMAL_SORT = false,\n        REVERSE_SORT = true;\n    var SYNCHRONOUS = true;\n\n    this._defineEvent('onCreate', Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent('onSuccess', Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n\n    this._defineEvent('onError', Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  };\n  /** @hidden */\n\n\n  TransitionService.prototype._defineCorePaths = function () {\n    var STATE = TransitionHookScope.STATE,\n        TRANSITION = TransitionHookScope.TRANSITION;\n\n    this._definePathType('to', TRANSITION);\n\n    this._definePathType('from', TRANSITION);\n\n    this._definePathType('exiting', STATE);\n\n    this._definePathType('retained', STATE);\n\n    this._definePathType('entering', STATE);\n  };\n  /** @hidden */\n\n\n  TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n    if (reverseSort === void 0) {\n      reverseSort = false;\n    }\n\n    if (getResultHandler === void 0) {\n      getResultHandler = TransitionHook.HANDLE_RESULT;\n    }\n\n    if (getErrorHandler === void 0) {\n      getErrorHandler = TransitionHook.REJECT_ERROR;\n    }\n\n    if (synchronous === void 0) {\n      synchronous = false;\n    }\n\n    var eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n\n    makeEvent(this, this, eventType);\n  };\n  /** @hidden */\n  // tslint:disable-next-line\n\n\n  TransitionService.prototype._getEvents = function (phase) {\n    var transitionHookTypes = isDefined(phase) ? this._eventTypes.filter(function (type) {\n      return type.hookPhase === phase;\n    }) : this._eventTypes.slice();\n    return transitionHookTypes.sort(function (l, r) {\n      var cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  };\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @hidden\n   */\n\n\n  TransitionService.prototype._definePathType = function (name, hookScope) {\n    this._criteriaPaths[name] = {\n      name: name,\n      scope: hookScope\n    };\n  };\n  /** @hidden */\n  // tslint:disable-next-line\n\n\n  TransitionService.prototype._getPathTypes = function () {\n    return this._criteriaPaths;\n  };\n  /** @hidden */\n\n\n  TransitionService.prototype.getHooks = function (hookName) {\n    return this._registeredHooks[hookName];\n  };\n  /** @hidden */\n\n\n  TransitionService.prototype._registerCoreTransitionHooks = function () {\n    var fns = this._deregisterHookFns;\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this); // Wire up redirectTo hook\n\n    fns.redirectTo = registerRedirectToHook(this); // Wire up onExit/Retain/Enter state hooks\n\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this); // Wire up Resolve hooks\n\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this); // Wire up the View management hooks\n\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this); // Updates global state after a transition\n\n    fns.updateGlobals = registerUpdateGlobalState(this); // After globals.current is updated at priority: 10000\n\n    fns.updateUrl = registerUpdateUrl(this); // Lazy load state trees\n\n    fns.lazyLoad = registerLazyLoadHook(this);\n  };\n\n  return TransitionService;\n}();\n\nexport { TransitionService };","map":{"version":3,"sources":["@uirouter/core/transition/transitionService.ts"],"names":[],"mappings":"AAAA;AACA,SAGE,mBAHF,EAIE,mBAJF,QAaO,aAbP;AAcA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,SAAT,QAA0C,gBAA1C;AAKA,SAAS,0BAAT,EAAqC,kBAArC,QAA+D,0BAA/D;AACA,SAAS,sBAAT,QAAuC,qBAAvC;AACA,SAAS,kBAAT,EAA6B,oBAA7B,EAAmD,mBAAnD,QAA8E,4BAA9E;AACA,SAAS,wBAAT,EAAmC,wBAAnC,EAA6D,wBAA7D,QAA6F,kBAA7F;AACA,SAAS,yBAAT,EAAoC,qBAApC,QAAiE,gBAAjE;AACA,SAAS,yBAAT,QAA0C,wBAA1C;AACA,SAAS,iBAAT,QAAkC,cAAlC;AACA,SAAS,oBAAT,QAAqC,mBAArC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,cAAT,QAAkE,kBAAlE;AACA,SAAS,SAAT,QAA0B,sBAA1B;AACA,SAAS,UAAT,EAAqB,MAArB,EAA6B,oBAA7B,QAAyD,kBAAzD;AAEA,SAAS,GAAT,QAAoB,eAApB;AACA,SAAS,6BAAT,QAA8C,4BAA9C;AACA,SAAS,6BAAT,QAA8C,4BAA9C;AAEA;;;;;;AAMG;;AACH,OAAO,IAAI,gBAAgB,GAAsB;AAC/C,EAAA,QAAQ,EAAE,IADqC;AAE/C,EAAA,QAAQ,EAAE,IAFqC;AAG/C,EAAA,OAAO,EAAE,KAHsC;AAI/C,EAAA,MAAM,EAAE,IAJuC;AAK/C,EAAA,MAAM,EAAE,KALuC;AAM/C,EAAA,SAAS,EAAE,IANoC;AAO/C,EAAA,MAAM,EAAE,EAPuC;AAQ/C,EAAA,OAAO,EAAE,YAAA;AAAM,WAAA,IAAA;AAAI,GAR4B;AAS/C,EAAA,MAAM,EAAE;AATuC,CAA1C;AA4DP;;;;;;;;AAQG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AA2CE;AACA,WAAA,iBAAA,CAAY,OAAZ,EAA6B;AA3C7B;AACA,SAAA,gBAAA,GAAmB,CAAnB;AAKA;;AACQ,SAAA,WAAA,GAAqC,EAArC;AACR;;AACA,SAAA,gBAAA,GAAmB,EAAnB;AACA;;AACQ,SAAA,cAAA,GAAiB,EAAjB;AAiCN,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,WAArB;AACA,SAAK,kBAAL,GAA+B,EAA/B;AACA,SAAK,UAAL,GACE,oBAAoB,CAAC,GAAG,CAAC,IAAD,CAAJ,EAAY,EAAZ,EAAgB,GAAG,CAAC,IAAD,CAAnB,EAA2B,CAC7C,iBAD6C,EAE7C,cAF6C,EAG7C,eAH6C,EAI7C,YAJ6C,EAK7C,UAL6C,CAA3B,CADtB;;AAUA,SAAK,gBAAL;;AACA,SAAK,iBAAL;;AACA,SAAK,4BAAL;;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,qBAAhB,CAAsC,OAAtC,CAA8C,kBAA9C;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAAsC,QAAtC,EAAwE,OAAxE,EAAgG;AAC9F;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAAsC,QAAtC,EAAkE,OAAlE,EAA0F;AACxF;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,QAAR,EAAqC,QAArC,EAAiE,OAAjE,EAAyF;AACvF;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,QAAP,EAAoC,QAApC,EAAqE,OAArE,EAA6F;AAC3F;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAAsC,QAAtC,EAAuE,OAAvE,EAA+F;AAC7F;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,QAAR,EAAqC,QAArC,EAAsE,OAAtE,EAA8F;AAC5F;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAAsC,QAAtC,EAAkE,OAAlE,EAA0F;AACxF;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAAuC,QAAvC,EAAmE,OAAnE,EAA2F;AACzF;AACD,GAFD;AAGA;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,QAAR,EAAqC,QAArC,EAAiE,OAAjE,EAAyF;AACvF;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAAwB;AACtB,IAAA,MAAM,CAAC,KAAK,gBAAN,CAAN,CAA8B,OAA9B,CAAsC,UAAC,UAAD,EAA6B;AACjE,aAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,QAAA,IAAI,CAAC,aAAL,GAAqB,IAArB;AACA,QAAA,UAAU,CAAC,UAAD,EAAa,IAAb,CAAV;AACD,OAHD,CAAA;AAGE,KAJJ;AAMD,GAPD;AASA;;;;;;;;;AASG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,QAAP,EAA6B,WAA7B,EAAqD;AACnD,WAAO,IAAI,UAAJ,CAAe,QAAf,EAAyB,WAAzB,EAAsC,KAAK,OAA3C,CAAP;AACD,GAFD;AAIA;;;AACQ,EAAA,iBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACE,QAAM,KAAK,GAAG,mBAAd;AACA,QAAM,EAAE,GAAG,cAAX;AACA,QAAM,KAAK,GAAG,KAAK,cAAnB;AACA,QAAM,WAAW,GAAG,KAApB;AAAA,QACE,YAAY,GAAG,IADjB;AAEA,QAAM,WAAW,GAAG,IAApB;;AAEA,SAAK,YAAL,CACE,UADF,EAEE,KAAK,CAAC,MAFR,EAGE,CAHF,EAIE,KAAK,CAAC,EAJR,EAKE,WALF,EAME,EAAE,CAAC,mBANL,EAOE,EAAE,CAAC,WAPL,EAQE,WARF;;AAWA,SAAK,YAAL,CAAkB,UAAlB,EAA8B,KAAK,CAAC,MAApC,EAA4C,CAA5C,EAA+C,KAAK,CAAC,EAArD;;AAEA,SAAK,YAAL,CAAkB,SAAlB,EAA6B,KAAK,CAAC,GAAnC,EAAwC,CAAxC,EAA2C,KAAK,CAAC,EAAjD;;AACA,SAAK,YAAL,CAAkB,QAAlB,EAA4B,KAAK,CAAC,GAAlC,EAAuC,GAAvC,EAA4C,KAAK,CAAC,OAAlD,EAA2D,YAA3D;;AACA,SAAK,YAAL,CAAkB,UAAlB,EAA8B,KAAK,CAAC,GAApC,EAAyC,GAAzC,EAA8C,KAAK,CAAC,QAApD;;AACA,SAAK,YAAL,CAAkB,SAAlB,EAA6B,KAAK,CAAC,GAAnC,EAAwC,GAAxC,EAA6C,KAAK,CAAC,QAAnD;;AACA,SAAK,YAAL,CAAkB,UAAlB,EAA8B,KAAK,CAAC,GAApC,EAAyC,GAAzC,EAA8C,KAAK,CAAC,EAApD;;AAEA,SAAK,YAAL,CACE,WADF,EAEE,KAAK,CAAC,OAFR,EAGE,CAHF,EAIE,KAAK,CAAC,EAJR,EAKE,WALF,EAME,EAAE,CAAC,mBANL,EAOE,EAAE,CAAC,SAPL,EAQE,WARF;;AAUA,SAAK,YAAL,CACE,SADF,EAEE,KAAK,CAAC,KAFR,EAGE,CAHF,EAIE,KAAK,CAAC,EAJR,EAKE,WALF,EAME,EAAE,CAAC,mBANL,EAOE,EAAE,CAAC,SAPL,EAQE,WARF;AAUD,GA/CO;AAiDR;;;AACQ,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACU,QAAA,KAAA,GAAA,mBAAA,CAAA,KAAA;AAAA,QAAO,UAAA,GAAA,mBAAA,CAAA,UAAP;;AAER,SAAK,eAAL,CAAqB,IAArB,EAA2B,UAA3B;;AACA,SAAK,eAAL,CAAqB,MAArB,EAA6B,UAA7B;;AACA,SAAK,eAAL,CAAqB,SAArB,EAAgC,KAAhC;;AACA,SAAK,eAAL,CAAqB,UAArB,EAAiC,KAAjC;;AACA,SAAK,eAAL,CAAqB,UAArB,EAAiC,KAAjC;AACD,GARO;AAUR;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UACE,IADF,EAEE,SAFF,EAGE,SAHF,EAIE,iBAJF,EAKE,WALF,EAME,gBANF,EAOE,eAPF,EAQE,WARF,EAQqB;AAHnB,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,KAAA;AAAmB;;AACnB,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAqC,cAAc,CAAC,aAApD;AAAiE;;AACjE,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAmC,cAAc,CAAC,YAAlD;AAA8D;;AAC9D,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,KAAA;AAAmB;;AAEnB,QAAM,SAAS,GAAG,IAAI,mBAAJ,CAChB,IADgB,EAEhB,SAFgB,EAGhB,SAHgB,EAIhB,iBAJgB,EAKhB,WALgB,EAMhB,gBANgB,EAOhB,eAPgB,EAQhB,WARgB,CAAlB;;AAWA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,SAAtB;;AACA,IAAA,SAAS,CAAC,IAAD,EAAO,IAAP,EAAa,SAAb,CAAT;AACD,GAvBD;AAyBA;AACA;;;AACQ,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,KAAnB,EAA8C;AAC5C,QAAM,mBAAmB,GAAG,SAAS,CAAC,KAAD,CAAT,GACxB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAC,SAAL,KAAA,KAAA;AAAwB,KAAxD,CADwB,GAExB,KAAK,WAAL,CAAiB,KAAjB,EAFJ;AAIA,WAAO,mBAAmB,CAAC,IAApB,CAAyB,UAAC,CAAD,EAAI,CAAJ,EAAK;AACnC,UAAM,UAAU,GAAG,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,SAAnC;AACA,aAAO,UAAU,KAAK,CAAf,GAAmB,CAAC,CAAC,SAAF,GAAc,CAAC,CAAC,SAAnC,GAA+C,UAAtD;AACD,KAHM,CAAP;AAID,GATO;AAWR;;;;;;;;;;;;AAYG;;;AACK,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,IAAxB,EAAsC,SAAtC,EAAoE;AAClE,SAAK,cAAL,CAAoB,IAApB,IAA4B;AAAE,MAAA,IAAI,EAAA,IAAN;AAAQ,MAAA,KAAK,EAAE;AAAf,KAA5B;AACD,GAFO;AAIR;AACA;;;AACQ,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACE,WAAO,KAAK,cAAZ;AACD,GAFO;AAIR;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,QAAhB,EAAgC;AAC9B,WAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACD,GAFM;AAIP;;;AACQ,EAAA,iBAAA,CAAA,SAAA,CAAA,4BAAA,GAAR,YAAA;AACE,QAAM,GAAG,GAAG,KAAK,kBAAjB;AAEA,IAAA,GAAG,CAAC,eAAJ,GAAsB,0BAA0B,CAAC,IAAD,CAAhD;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,6BAA6B,CAAC,IAAD,CAA3C;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,6BAA6B,CAAC,IAAD,CAA3C,CALF,CAOE;;AACA,IAAA,GAAG,CAAC,UAAJ,GAAiB,sBAAsB,CAAC,IAAD,CAAvC,CARF,CAUE;;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa,kBAAkB,CAAC,IAAD,CAA/B;AACA,IAAA,GAAG,CAAC,QAAJ,GAAe,oBAAoB,CAAC,IAAD,CAAnC;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,mBAAmB,CAAC,IAAD,CAAjC,CAbF,CAeE;;AACA,IAAA,GAAG,CAAC,YAAJ,GAAmB,wBAAwB,CAAC,IAAD,CAA3C;AACA,IAAA,GAAG,CAAC,WAAJ,GAAkB,wBAAwB,CAAC,IAAD,CAA1C;AACA,IAAA,GAAG,CAAC,UAAJ,GAAiB,wBAAwB,CAAC,IAAD,CAAzC,CAlBF,CAoBE;;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,yBAAyB,CAAC,IAAD,CAAzC;AACA,IAAA,GAAG,CAAC,aAAJ,GAAoB,qBAAqB,CAAC,IAAD,CAAzC,CAtBF,CAwBE;;AACA,IAAA,GAAG,CAAC,aAAJ,GAAoB,yBAAyB,CAAC,IAAD,CAA7C,CAzBF,CA2BE;;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,iBAAiB,CAAC,IAAD,CAAjC,CA5BF,CA8BE;;AACA,IAAA,GAAG,CAAC,QAAJ,GAAe,oBAAoB,CAAC,IAAD,CAAnC;AACD,GAhCO;;AAiCV,SAAA,iBAAA;AAAC,CAxTD,EAAA","sourcesContent":["/** @packageDocumentation @publicapi @module transition */\nimport {\n  IHookRegistry,\n  TransitionOptions,\n  TransitionHookScope,\n  TransitionHookPhase,\n  TransitionCreateHookFn,\n  HookMatchCriteria,\n  HookRegOptions,\n  PathTypes,\n  PathType,\n  RegisteredHooks,\n  TransitionHookFn,\n  TransitionStateHookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: () => null,\n  source: 'unknown',\n};\n\n/**\n * Plugin API for Transition Service\n * @internalapi\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort?: boolean,\n    getResultHandler?: GetResultHandler,\n    getErrorHandler?: GetErrorHandler,\n    rejectIfSuperseded?: boolean\n  );\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @hidden */\n  _transitionCount = 0;\n\n  /** @hidden */\n  public $view: ViewService;\n\n  /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @hidden The registered transition hooks */\n  _registeredHooks = {} as RegisteredHooks;\n  /** @hidden The  paths on a criteria object */\n  private _criteriaPaths = {} as PathTypes;\n  /** @hidden */\n  private _router: UIRouter;\n\n  /** @internalapi */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    resolveAll: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @hidden */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any>{};\n    this._pluginapi = <TransitionServicePluginAPI>(\n      createProxyFunctions(val(this), {}, val(this), [\n        '_definePathType',\n        '_defineEvent',\n        '_getPathTypes',\n        '_getEvents',\n        'getHooks',\n      ])\n    );\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internalapi\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n\n  /**\n   * dispose\n   * @internalapi\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) =>\n      hooksArray.forEach(hook => {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      })\n    );\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @hidden */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false,\n      REVERSE_SORT = true;\n    const SYNCHRONOUS = true;\n\n    this._defineEvent(\n      'onCreate',\n      Phase.CREATE,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.THROW_ERROR,\n      SYNCHRONOUS\n    );\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent(\n      'onSuccess',\n      Phase.SUCCESS,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n    this._defineEvent(\n      'onError',\n      Phase.ERROR,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n  }\n\n  /** @hidden */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType('to', TRANSITION);\n    this._definePathType('from', TRANSITION);\n    this._definePathType('exiting', STATE);\n    this._definePathType('retained', STATE);\n    this._definePathType('entering', STATE);\n  }\n\n  /** @hidden */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort = false,\n    getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n    getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n    synchronous = false\n  ) {\n    const eventType = new TransitionEventType(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort,\n      getResultHandler,\n      getErrorHandler,\n      synchronous\n    );\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  }\n\n  /** @hidden */\n  // tslint:disable-next-line\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    const transitionHookTypes = isDefined(phase)\n      ? this._eventTypes.filter(type => type.hookPhase === phase)\n      : this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      const cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @hidden\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** @hidden */\n  // tslint:disable-next-line\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @hidden */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @hidden */\n  private _registerCoreTransitionHooks() {\n    const fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo = registerRedirectToHook(this);\n\n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this);\n\n    // Wire up the View management hooks\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad = registerLazyLoadHook(this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}