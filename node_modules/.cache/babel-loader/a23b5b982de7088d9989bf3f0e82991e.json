{"ast":null,"code":"import { extend, is, isString, pattern } from '../common';\nimport { UrlRules } from './urlRules';\nimport { UrlConfig } from './urlConfig';\nimport { TargetState } from '../state';\n/** API for URL management */\n\nvar UrlService =\n/** @class */\nfunction () {\n  /** @hidden */\n  function UrlService(\n  /** @hidden */\n  router) {\n    var _this = this;\n\n    this.router = router;\n    /** @hidden */\n\n    this.interceptDeferred = false;\n    /**\n     * The nested [[UrlRules]] API for managing URL rules and rewrites\n     *\n     * See: [[UrlRules]] for details\n     */\n\n    this.rules = new UrlRules(this.router);\n    /**\n     * The nested [[UrlConfig]] API to configure the URL and retrieve URL information\n     *\n     * See: [[UrlConfig]] for details\n     */\n\n    this.config = new UrlConfig(this.router); // Delegate these calls to the current LocationServices implementation\n\n    /**\n     * Gets the current url, or updates the url\n     *\n     * ### Getting the current URL\n     *\n     * When no arguments are passed, returns the current URL.\n     * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n     *\n     * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n     * have a base HREF prepended ([[PushStateLocationServices]]).\n     *\n     * The raw URL in the browser might be:\n     *\n     * ```\n     * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n     * ```\n     *\n     * or\n     *\n     * ```\n     * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n     * ```\n     *\n     * then this method returns:\n     *\n     * ```\n     * /internal/path/123?param1=foo#anchor\n     * ```\n     *\n     *\n     * #### Example:\n     * ```js\n     * locationServices.url(); // \"/some/path?query=value#anchor\"\n     * ```\n     *\n     * ### Updating the URL\n     *\n     * When `newurl` arguments is provided, changes the URL to reflect `newurl`\n     *\n     * #### Example:\n     * ```js\n     * locationServices.url(\"/some/path?query=value#anchor\", true);\n     * ```\n     *\n     * @param newurl The new value for the URL.\n     *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n     *               It should not include the protocol, site, port, or base path of an absolute HREF.\n     * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n     * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n     *\n     * @return the url (after potentially being processed)\n     */\n\n    this.url = function (newurl, replace, state) {\n      return _this.router.locationService.url(newurl, replace, state);\n    };\n    /**\n     * Gets the path part of the current url\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n     *\n     * @return the path portion of the url\n     */\n\n\n    this.path = function () {\n      return _this.router.locationService.path();\n    };\n    /**\n     * Gets the search part of the current url as an object\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n     *\n     * @return the search (query) portion of the url, as an object\n     */\n\n\n    this.search = function () {\n      return _this.router.locationService.search();\n    };\n    /**\n     * Gets the hash part of the current url\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n     *\n     * @return the hash (anchor) portion of the url\n     */\n\n\n    this.hash = function () {\n      return _this.router.locationService.hash();\n    };\n    /**\n     * @internalapi\n     *\n     * Registers a low level url change handler\n     *\n     * Note: Because this is a low level handler, it's not recommended for general use.\n     *\n     * #### Example:\n     * ```js\n     * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n     * ```\n     *\n     * @param callback a function that will be called when the url is changing\n     * @return a function that de-registers the callback\n     */\n\n\n    this.onChange = function (callback) {\n      return _this.router.locationService.onChange(callback);\n    };\n  }\n  /** @hidden */\n\n\n  UrlService.prototype.dispose = function () {\n    this.listen(false);\n    this.rules.dispose();\n  };\n  /**\n   * Gets the current URL parts\n   *\n   * This method returns the different parts of the current URL (the [[path]], [[search]], and [[hash]]) as a [[UrlParts]] object.\n   */\n\n\n  UrlService.prototype.parts = function () {\n    return {\n      path: this.path(),\n      search: this.search(),\n      hash: this.hash()\n    };\n  };\n  /**\n   * Activates the best rule for the current URL\n   *\n   * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.\n   * This method is called internally any time the URL has changed.\n   *\n   * This effectively activates the state (or redirect, etc) which matches the current URL.\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   // Find the matching URL and invoke the handler.\n   *   urlService.sync();\n   * });\n   * ```\n   */\n\n\n  UrlService.prototype.sync = function (evt) {\n    if (evt && evt.defaultPrevented) return;\n    var _a = this.router,\n        urlService = _a.urlService,\n        stateService = _a.stateService;\n    var url = {\n      path: urlService.path(),\n      search: urlService.search(),\n      hash: urlService.hash()\n    };\n    var best = this.match(url);\n    var applyResult = pattern([[isString, function (newurl) {\n      return urlService.url(newurl, true);\n    }], [TargetState.isDef, function (def) {\n      return stateService.go(def.state, def.params, def.options);\n    }], [is(TargetState), function (target) {\n      return stateService.go(target.state(), target.params(), target.options());\n    }]]);\n    applyResult(best && best.rule.handler(best.match, url, this.router));\n  };\n  /**\n   * Starts or stops listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes UI-Router to start listening for changes to the URL, if it wasn't already listening.\n   *\n   * If called with `false`, UI-Router will stop listening (call listen(true) to start listening again).\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   // Start responding to URL changes\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param enabled `true` or `false` to start or stop listening to URL changes\n   */\n\n\n  UrlService.prototype.listen = function (enabled) {\n    var _this = this;\n\n    if (enabled === false) {\n      this._stopListeningFn && this._stopListeningFn();\n      delete this._stopListeningFn;\n    } else {\n      return this._stopListeningFn = this._stopListeningFn || this.router.urlService.onChange(function (evt) {\n        return _this.sync(evt);\n      });\n    }\n  };\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * #### Example:\n   * ```js\n   * // Prevent UI-Router from automatically intercepting URL changes when it starts;\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception.\n   *        Passing no parameter is equivalent to `true`.\n   */\n\n\n  UrlService.prototype.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n  /**\n   * Matches a URL\n   *\n   * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.\n   * Return the result as a [[MatchResult]].\n   */\n\n\n  UrlService.prototype.match = function (url) {\n    var _this = this;\n\n    url = extend({\n      path: '',\n      search: {},\n      hash: ''\n    }, url);\n    var rules = this.rules.rules(); // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n\n    var checkRule = function (rule) {\n      var match = rule.match(url, _this.router);\n      return match && {\n        match: match,\n        rule: rule,\n        weight: rule.matchPriority(match)\n      };\n    }; // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n\n\n    var best;\n\n    for (var i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && best.rule._group !== rules[i]._group) break;\n      var current = checkRule(rules[i]); // Pick the best MatchResult\n\n      best = !best || current && current.weight > best.weight ? current : best;\n    }\n\n    return best;\n  };\n\n  return UrlService;\n}();\n\nexport { UrlService };","map":{"version":3,"sources":["@uirouter/core/url/urlService.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module url */\nimport { UIRouter } from '../router';\nimport { extend, is, isString, LocationServices, pattern } from '../common';\nimport { MatchResult, UrlParts, UrlRule, UrlSyncApi } from './interface';\nimport { UrlRules } from './urlRules';\nimport { UrlConfig } from './urlConfig';\nimport { TargetState, TargetStateDef } from '../state';\n\n/** API for URL management */\nexport class UrlService implements LocationServices, UrlSyncApi {\n  /** @hidden */ private _stopListeningFn: Function;\n  /** @hidden */ interceptDeferred = false;\n\n  /**\n   * The nested [[UrlRules]] API for managing URL rules and rewrites\n   *\n   * See: [[UrlRules]] for details\n   */\n  public rules = new UrlRules(this.router);\n\n  /**\n   * The nested [[UrlConfig]] API to configure the URL and retrieve URL information\n   *\n   * See: [[UrlConfig]] for details\n   */\n  public config = new UrlConfig(this.router);\n\n  /** @hidden */\n  constructor(/** @hidden */ private router: UIRouter) {}\n  /** @hidden */\n  public dispose() {\n    this.listen(false);\n    (this.rules as UrlRules).dispose();\n  }\n\n  /**\n   * Gets the current URL parts\n   *\n   * This method returns the different parts of the current URL (the [[path]], [[search]], and [[hash]]) as a [[UrlParts]] object.\n   */\n  public parts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() };\n  }\n\n  /**\n   * Activates the best rule for the current URL\n   *\n   * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.\n   * This method is called internally any time the URL has changed.\n   *\n   * This effectively activates the state (or redirect, etc) which matches the current URL.\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   // Find the matching URL and invoke the handler.\n   *   urlService.sync();\n   * });\n   * ```\n   */\n  public sync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n    const { urlService, stateService } = this.router;\n\n    const url: UrlParts = { path: urlService.path(), search: urlService.search(), hash: urlService.hash() };\n    const best = this.match(url);\n\n    const applyResult = pattern([\n      [isString, (newurl: string) => urlService.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => stateService.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => stateService.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, this.router));\n  }\n\n  /**\n   * Starts or stops listening for URL changes\n   *\n   * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n   * This causes UI-Router to start listening for changes to the URL, if it wasn't already listening.\n   *\n   * If called with `false`, UI-Router will stop listening (call listen(true) to start listening again).\n   *\n   * #### Example:\n   * ```js\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   // Start responding to URL changes\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param enabled `true` or `false` to start or stop listening to URL changes\n   */\n  public listen(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopListeningFn && this._stopListeningFn();\n      delete this._stopListeningFn;\n    } else {\n      return (this._stopListeningFn = this._stopListeningFn || this.router.urlService.onChange(evt => this.sync(evt)));\n    }\n  }\n\n  /**\n   * Disables monitoring of the URL.\n   *\n   * Call this method before UI-Router has bootstrapped.\n   * It will stop UI-Router from performing the initial url sync.\n   *\n   * This can be useful to perform some asynchronous initialization before the router starts.\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n   *\n   * #### Example:\n   * ```js\n   * // Prevent UI-Router from automatically intercepting URL changes when it starts;\n   * urlService.deferIntercept();\n   *\n   * fetch('/states.json').then(resp => resp.json()).then(data => {\n   *   data.forEach(state => $stateRegistry.register(state));\n   *   urlService.listen();\n   *   urlService.sync();\n   * });\n   * ```\n   *\n   * @param defer Indicates whether to defer location change interception.\n   *        Passing no parameter is equivalent to `true`.\n   */\n  public deferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  }\n\n  /**\n   * Matches a URL\n   *\n   * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.\n   * Return the result as a [[MatchResult]].\n   */\n  public match(url: UrlParts): MatchResult {\n    url = extend({ path: '', search: {}, hash: '' }, url);\n    const rules = this.rules.rules();\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n    const checkRule = (rule: UrlRule): MatchResult => {\n      const match = rule.match(url, this.router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let best: MatchResult;\n    for (let i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && best.rule._group !== rules[i]._group) break;\n\n      const current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = !best || (current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n\n  // Delegate these calls to the current LocationServices implementation\n  /**\n   * Gets the current url, or updates the url\n   *\n   * ### Getting the current URL\n   *\n   * When no arguments are passed, returns the current URL.\n   * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n   *\n   * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n   * have a base HREF prepended ([[PushStateLocationServices]]).\n   *\n   * The raw URL in the browser might be:\n   *\n   * ```\n   * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * or\n   *\n   * ```\n   * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * then this method returns:\n   *\n   * ```\n   * /internal/path/123?param1=foo#anchor\n   * ```\n   *\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(); // \"/some/path?query=value#anchor\"\n   * ```\n   *\n   * ### Updating the URL\n   *\n   * When `newurl` arguments is provided, changes the URL to reflect `newurl`\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(\"/some/path?query=value#anchor\", true);\n   * ```\n   *\n   * @param newurl The new value for the URL.\n   *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n   *               It should not include the protocol, site, port, or base path of an absolute HREF.\n   * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n   * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n   *\n   * @return the url (after potentially being processed)\n   */\n  public url = (newurl?: string, replace?: boolean, state?: any): string =>\n    this.router.locationService.url(newurl, replace, state);\n\n  /**\n   * Gets the path part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n   *\n   * @return the path portion of the url\n   */\n  public path = (): string => this.router.locationService.path();\n\n  /**\n   * Gets the search part of the current url as an object\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n   *\n   * @return the search (query) portion of the url, as an object\n   */\n  public search = (): { [key: string]: any } => this.router.locationService.search();\n\n  /**\n   * Gets the hash part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n   *\n   * @return the hash (anchor) portion of the url\n   */\n  public hash = (): string => this.router.locationService.hash();\n\n  /**\n   * @internalapi\n   *\n   * Registers a low level url change handler\n   *\n   * Note: Because this is a low level handler, it's not recommended for general use.\n   *\n   * #### Example:\n   * ```js\n   * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n   * ```\n   *\n   * @param callback a function that will be called when the url is changing\n   * @return a function that de-registers the callback\n   */\n  public onChange = (callback: EventListener): Function => this.router.locationService.onChange(callback);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}