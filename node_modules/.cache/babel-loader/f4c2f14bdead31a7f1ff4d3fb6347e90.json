{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation @preferred @publicapi @module common\n */\n\n\nimport { isFunction, isString, isArray, isRegExp, isDate } from './predicates';\nimport { all, any, prop, curry, not } from './hof';\nimport { services } from './coreservices';\nexport var root = typeof self === 'object' && self.self === self && self || typeof global === 'object' && global.global === global && global || this;\nvar angular = root.angular || {};\nexport var fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport var toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport var forEach = angular.forEach || _forEach;\nexport var extend = Object.assign || _extend;\nexport var equals = angular.equals || _equals;\nexport function identity(x) {\n  return x;\n}\nexport function noop() {}\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\n\nexport function createProxyFunctions(source, target, bind, fnNames, latebind) {\n  if (latebind === void 0) {\n    latebind = false;\n  }\n\n  var bindFunction = function (fnName) {\n    return source()[fnName].bind(bind());\n  };\n\n  var makeLateRebindFn = function (fnName) {\n    return function lateRebindFunction() {\n      target[fnName] = bindFunction(fnName);\n      return target[fnName].apply(null, arguments);\n    };\n  };\n\n  fnNames = fnNames || Object.keys(source());\n  return fnNames.reduce(function (acc, name) {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\n\nexport var inherit = function (parent, extra) {\n  return extend(Object.create(parent), extra);\n};\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\n\nexport var inArray = curry(_inArray);\nexport function _inArray(array, obj) {\n  return array.indexOf(obj) !== -1;\n}\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\n\nexport var removeFrom = curry(_removeFrom);\nexport function _removeFrom(array, obj) {\n  var idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n/** pushes a values to an array and returns the value */\n\nexport var pushTo = curry(_pushTo);\nexport function _pushTo(arr, val) {\n  return arr.push(val), val;\n}\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\n\nexport var deregAll = function (functions) {\n  return functions.slice().forEach(function (fn) {\n    typeof fn === 'function' && fn();\n    removeFrom(functions, fn);\n  });\n};\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\n\nexport function defaults(opts) {\n  var defaultsList = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    defaultsList[_i - 1] = arguments[_i];\n  }\n\n  var defaultVals = extend.apply(void 0, __spreadArrays([{}], defaultsList.reverse()));\n  return extend(defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n/** Reduce function that merges each element of the list into a single object, using extend */\n\nexport var mergeR = function (memo, item) {\n  return extend(memo, item);\n};\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\n\nexport function ancestors(first, second) {\n  var path = []; // tslint:disable-next-line:forin\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n\n  return path;\n}\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\n\nexport function pick(obj, propNames) {\n  var objCopy = {};\n\n  for (var _prop in obj) {\n    if (propNames.indexOf(_prop) !== -1) {\n      objCopy[_prop] = obj[_prop];\n    }\n  }\n\n  return objCopy;\n}\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\n\nexport function omit(obj, propNames) {\n  return Object.keys(obj).filter(not(inArray(propNames))).reduce(function (acc, key) {\n    return acc[key] = obj[key], acc;\n  }, {});\n}\n/**\n * Maps an array, or object to a property (by name)\n */\n\nexport function pluck(collection, propName) {\n  return map(collection, prop(propName));\n}\n/** Filters an Array or an Object's properties based on a predicate */\n\nexport function filter(collection, callback) {\n  var arr = isArray(collection),\n      result = arr ? [] : {};\n  var accept = arr ? function (x) {\n    return result.push(x);\n  } : function (x, key) {\n    return result[key] = x;\n  };\n  forEach(collection, function (item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return result;\n}\n/** Finds an object from an array, or a property of an object, that matches a predicate */\n\nexport function find(collection, callback) {\n  var result;\n  forEach(collection, function (item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n  return result;\n}\n/** Given an object, returns a new object, where each property is transformed by the callback function */\n\nexport var mapObj = map;\n/** Maps an array or object properties using a callback function */\n\nexport function map(collection, callback, target) {\n  target = target || (isArray(collection) ? [] : {});\n  forEach(collection, function (item, i) {\n    return target[i] = callback(item, i);\n  });\n  return target;\n}\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\n\nexport var values = function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\n\nexport var allTrueR = function (memo, elem) {\n  return memo && elem;\n};\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\n\nexport var anyTrueR = function (memo, elem) {\n  return memo || elem;\n};\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\n\nexport var unnestR = function (memo, elem) {\n  return memo.concat(elem);\n};\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\n\nexport var flattenR = function (memo, elem) {\n  return isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n};\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\n\nexport function pushR(arr, obj) {\n  arr.push(obj);\n  return arr;\n}\n/** Reduce function that filters out duplicates */\n\nexport var uniqR = function (acc, token) {\n  return inArray(acc, token) ? acc : pushR(acc, token);\n};\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\n\nexport var unnest = function (arr) {\n  return arr.reduce(unnestR, []);\n};\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\n\nexport var flatten = function (arr) {\n  return arr.reduce(flattenR, []);\n};\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\n\nexport var assertPredicate = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\n\nexport var assertMap = assertFn;\nexport function assertFn(predicateOrMap, errMsg) {\n  if (errMsg === void 0) {\n    errMsg = 'assert failure';\n  }\n\n  return function (obj) {\n    var result = predicateOrMap(obj);\n\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? errMsg(obj) : errMsg);\n    }\n\n    return result;\n  };\n}\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\n\nexport var pairs = function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return [key, obj[key]];\n  });\n};\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\n\nexport function arrayTuples() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  if (args.length === 0) return [];\n  var maxArrayLen = args.reduce(function (min, arr) {\n    return Math.min(arr.length, min);\n  }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\n  var result = [];\n\n  var _loop_1 = function (i) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1:\n        result.push([args[0][i]]);\n        break;\n\n      case 2:\n        result.push([args[0][i], args[1][i]]);\n        break;\n\n      case 3:\n        result.push([args[0][i], args[1][i], args[2][i]]);\n        break;\n\n      case 4:\n        result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n        break;\n\n      default:\n        result.push(args.map(function (array) {\n          return array[i];\n        }));\n        break;\n    }\n  };\n\n  for (var i = 0; i < maxArrayLen; i++) {\n    _loop_1(i);\n  }\n\n  return result;\n}\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\n\nexport function applyPairs(memo, keyValTuple) {\n  var key, value;\n  if (isArray(keyValTuple)) key = keyValTuple[0], value = keyValTuple[1];\n  if (!isString(key)) throw new Error('invalid parameters to applyPairs');\n  memo[key] = value;\n  return memo;\n}\n/** Get the last element of an array */\n\nexport function tail(arr) {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n/**\n * shallow copy from src to dest\n */\n\nexport function copy(src, dest) {\n  if (dest) Object.keys(dest).forEach(function (key) {\n    return delete dest[key];\n  });\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n/** Naive forEach implementation works with Objects or Arrays */\n\nfunction _forEach(obj, cb, _this) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(function (key) {\n    return cb(obj[key], key);\n  });\n}\n\nexport function _extend(toObj) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    if (!obj) continue;\n    var keys = Object.keys(obj);\n\n    for (var j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n\nfunction _equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  var t1 = typeof o1,\n      t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n  var tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  var predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce(function (b, fn) {\n    return b || !!fn(tup);\n  }, false)) return false;\n  var keys = {}; // tslint:disable-next-line:forin\n\n  for (var key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n\n  for (var key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1, a2) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce(function (b, t) {\n    return b && _equals(t[0], t[1]);\n  }, true);\n} // issue #2676\n\n\nexport var silenceUncaughtInPromise = function (promise) {\n  return promise.catch(function (e) {\n    return 0;\n  }) && promise;\n};\nexport var silentRejection = function (error) {\n  return silenceUncaughtInPromise(services.$q.reject(error));\n};","map":{"version":3,"sources":["@uirouter/core/common/common.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation @preferred @publicapi @module common\n */\nimport { isFunction, isString, isArray, isRegExp, isDate } from './predicates';\nimport { all, any, prop, curry, not } from './hof';\nimport { services } from './coreservices';\nimport { StateObject } from '../state/stateObject';\n\ndeclare const global;\nexport const root: any =\n  (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global) ||\n  this;\nconst angular = root.angular || {};\n\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const forEach = angular.forEach || _forEach;\nexport const extend = Object.assign || _extend;\nexport const equals = angular.equals || _equals;\nexport function identity(x: any) {\n  return x;\n}\nexport function noop(): any {}\n\nexport type Mapper<X, T> = (x: X, key?: string | number) => T;\nexport interface TypedMap<T> {\n  [key: string]: T;\n}\nexport type Predicate<X> = (x?: X) => boolean;\nexport type PredicateBinary<X, Y> = (x?: X, y?: Y) => boolean;\n/**\n * An ng1-style injectable\n *\n * This could be a (non-minified) function such as:\n * ```js\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an explicitly annotated function (minify safe)\n * ```js\n * injectableFunction.$inject = [ 'SomeDependency' ];\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an array style annotated function (minify safe)\n * ```js\n * ['SomeDependency', function injectableFunction(SomeDependency) {\n *\n * }];\n * ```\n *\n * @publicapi\n */\nexport type IInjectable = Function | any[];\n\nexport interface Obj extends Object {\n  [key: string]: any;\n}\n\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nexport function createProxyFunctions(\n  source: Function,\n  target: Obj,\n  bind: Function,\n  fnNames?: string[],\n  latebind = false\n): Obj {\n  const bindFunction = fnName => source()[fnName].bind(bind());\n\n  const makeLateRebindFn = fnName =>\n    function lateRebindFunction() {\n      target[fnName] = bindFunction(fnName);\n      return target[fnName].apply(null, arguments);\n    };\n\n  fnNames = fnNames || Object.keys(source());\n\n  return fnNames.reduce((acc, name) => {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra?: Obj) => extend(Object.create(parent), extra);\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray: typeof _inArray = curry(_inArray) as any;\nexport function _inArray(array: any[], obj: any): boolean;\nexport function _inArray(array: any[]): (obj: any) => boolean;\nexport function _inArray(array, obj?): any {\n  return array.indexOf(obj) !== -1;\n}\n\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport const removeFrom: typeof _removeFrom = curry(_removeFrom) as any;\nexport function _removeFrom<T>(array: T[], obj: T): T[];\nexport function _removeFrom<T>(array: T[]): (obj: T) => T[];\nexport function _removeFrom(array, obj?) {\n  const idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n\n/** pushes a values to an array and returns the value */\nexport const pushTo: typeof _pushTo = curry(_pushTo) as any;\nexport function _pushTo<T>(arr: T[], val: T): T;\nexport function _pushTo<T>(arr: T[]): (val: T) => T;\nexport function _pushTo(arr, val?): any {\n  return arr.push(val), val;\n}\n\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexport const deregAll = (functions: Function[]) =>\n  functions.slice().forEach(fn => {\n    typeof fn === 'function' && fn();\n    removeFrom(functions, fn);\n  });\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts, ...defaultsList: Obj[]) {\n  const defaultVals = extend({}, ...defaultsList.reverse());\n  return extend(defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: StateObject, second: StateObject) {\n  const path: StateObject[] = [];\n\n  // tslint:disable-next-line:forin\n  for (const n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj {\n  const objCopy = {};\n  for (const _prop in obj) {\n    if (propNames.indexOf(_prop) !== -1) {\n      objCopy[_prop] = obj[_prop];\n    }\n  }\n  return objCopy;\n}\n\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj {\n  return Object.keys(obj)\n    .filter(not(inArray(propNames)))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n}\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck<T>(collection: Obj[], propName: string): T[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>>prop(propName));\n}\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  const arr = isArray(collection),\n    result: any = arr ? [] : {};\n  const accept = arr ? x => result.push(x) : (x, key) => (result[key] = x);\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T, U>(\n  collection: { [key: string]: T },\n  callback: Mapper<T, U>,\n  target?: typeof collection\n) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>, target?: typeof collection): U[];\nexport function map<T, U>(\n  collection: { [key: string]: T },\n  callback: Mapper<T, U>,\n  target?: typeof collection\n): { [key: string]: U };\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any, target: typeof collection): any {\n  target = target || (isArray(collection) ? [] : {});\n  forEach(collection, (item, i) => (target[i] = callback(item, i)));\n  return target;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T>(obj: TypedMap<T>) => T[]) = (obj: Obj) => Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR = (memo: any[], elem: any) =>\n  isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T>(acc: T[], token: T): T[] => (inArray(acc, token) ? acc : pushR(acc, token));\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport const assertPredicate: <T>(predicate: Predicate<T>, errMsg: string | Function) => Predicate<T> = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport const assertMap: <T, U>(mapFn: (t: T) => U, errMsg: string | Function) => (t: T) => U = assertFn;\nexport function assertFn(predicateOrMap: Function, errMsg: string | Function = 'assert failure'): any {\n  return obj => {\n    const result = predicateOrMap(obj);\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? (<Function>errMsg)(obj) : errMsg);\n    }\n    return result;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) => Object.keys(obj).map(key => [key, obj[key]]);\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...args: any[]): any[] {\n  if (args.length === 0) return [];\n  const maxArrayLen = args.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n  const result = [];\n\n  for (let i = 0; i < maxArrayLen; i++) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1:\n        result.push([args[0][i]]);\n        break;\n      case 2:\n        result.push([args[0][i], args[1][i]]);\n        break;\n      case 3:\n        result.push([args[0][i], args[1][i], args[2][i]]);\n        break;\n      case 4:\n        result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n        break;\n      default:\n        result.push(args.map(array => array[i]));\n        break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error('invalid parameters to applyPairs');\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return (arr.length && arr[arr.length - 1]) || undefined;\n}\n\n/**\n * shallow copy from src to dest\n */\nexport function copy(src: Obj, dest?: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: any[] | any, cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\n/** Like Object.assign() */\nexport function _extend(toObj: Obj, ...fromObjs: Obj[]): any;\nexport function _extend(toObj: Obj): any {\n  for (let i = 1; i < arguments.length; i++) {\n    const obj = arguments[i];\n    if (!obj) continue;\n    const keys = Object.keys(obj);\n\n    for (let j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  const t1 = typeof o1,\n    t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  const predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  const keys: { [i: string]: boolean } = {};\n  // tslint:disable-next-line:forin\n  for (const key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (const key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) => promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) => silenceUncaughtInPromise(services.$q.reject(error));\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}