{"ast":null,"code":"/** @packageDocumentation @publicapi @module params */\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\n\nvar ParamTypes =\n/** @class */\nfunction () {\n  /** @internalapi */\n  function ParamTypes() {\n    /** @hidden */\n    this.enqueue = true;\n    /** @hidden */\n\n    this.typeQueue = [];\n    /** @internalapi */\n\n    this.defaultTypes = pick(ParamTypes.prototype, ['hash', 'string', 'query', 'path', 'int', 'bool', 'date', 'json', 'any']); // Register default types. Store them in the prototype of this.types.\n\n    var makeType = function (definition, name) {\n      return new ParamType(extend({\n        name: name\n      }, definition));\n    };\n\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n  /** @internalapi */\n\n\n  ParamTypes.prototype.dispose = function () {\n    this.types = {};\n  };\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n\n\n  ParamTypes.prototype.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n    this.types[name] = new ParamType(extend({\n      name: name\n    }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({\n        name: name,\n        def: definitionFn\n      });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  };\n  /** @internalapi */\n\n\n  ParamTypes.prototype._flushTypeQueue = function () {\n    while (this.typeQueue.length) {\n      var type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  };\n\n  return ParamTypes;\n}();\n\nexport { ParamTypes };\n/** @hidden */\n\nfunction initDefaultTypes() {\n  var makeDefaultType = function (def) {\n    var valToString = function (val) {\n      return val != null ? val.toString() : val;\n    };\n\n    var defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: function (a, b) {\n        return a == b;\n      }\n    };\n    return extend({}, defaultTypeBase, def);\n  }; // Default Parameter Type Definitions\n\n\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n    path: makeDefaultType({\n      pattern: /[^/]*/\n    }),\n    query: makeDefaultType({}),\n    hash: makeDefaultType({\n      inherit: false\n    }),\n    int: makeDefaultType({\n      decode: function (val) {\n        return parseInt(val, 10);\n      },\n      is: function (val) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/\n    }),\n    bool: makeDefaultType({\n      encode: function (val) {\n        return val && 1 || 0;\n      },\n      decode: function (val) {\n        return parseInt(val, 10) !== 0;\n      },\n      is: is(Boolean),\n      pattern: /0|1/\n    }),\n    date: makeDefaultType({\n      encode: function (val) {\n        return !this.is(val) ? undefined : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function (val) {\n        return val instanceof Date && !isNaN(val.valueOf());\n      },\n      equals: function (l, r) {\n        return ['getFullYear', 'getMonth', 'getDate'].reduce(function (acc, fn) {\n          return acc && l[fn]() === r[fn]();\n        }, true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    }),\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    }),\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: function () {\n        return true;\n      },\n      equals: equals\n    })\n  });\n}\n\ninitDefaultTypes();","map":{"version":3,"sources":["@uirouter/core/params/paramTypes.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module params */\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\nexport class ParamTypes {\n  /**\n   * Built-in parameter type: `string`\n   *\n   * This parameter type coerces values to strings.\n   * It matches anything (`new RegExp(\".*\")`) in the URL\n   */\n  static string: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `path`\n   *\n   * This parameter type is the default type for path parameters.\n   * A path parameter is any parameter declared in the path portion of a url\n   *\n   * - `/foo/:param1/:param2`: two path parameters\n   *\n   * This parameter type behaves exactly like the [[string]] type with one exception.\n   * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n   *\n   * #### Angular 1 note:\n   * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n   * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n   */\n  static path: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `query`\n   *\n   * This parameter type is the default type for query/search parameters.\n   * It behaves the same as the [[string]] parameter type.\n   *\n   * A query parameter is any parameter declared in the query/search portion of a url\n   *\n   * - `/bar?param2`: a query parameter\n   */\n  static query: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `hash`\n   *\n   * This parameter type is used for the `#` parameter (the hash)\n   * It behaves the same as the [[string]] parameter type.\n   */\n  static hash: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `int`\n   *\n   * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'user',\n   *   url: '/user/{id:int}'\n   * });\n   * ```\n   * ```js\n   * $state.go('user', { id: 1298547 });\n   * ```\n   *\n   * The URL will serialize to: `/user/1298547`.\n   *\n   * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n   */\n  static int: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `bool`\n   *\n   * This parameter type serializes `true`/`false` as `1`/`0`\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'inbox',\n   *   url: '/inbox?{unread:bool}'\n   * });\n   * ```\n   * ```js\n   * $state.go('inbox', { unread: true });\n   * ```\n   *\n   * The URL will serialize to: `/inbox?unread=1`.\n   *\n   * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n   */\n  static bool: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `date`\n   *\n   * This parameter type can be used to serialize Javascript dates as parameter values.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'search',\n   *   url: '/search?{start:date}'\n   * });\n   * ```\n   * ```js\n   * $state.go('search', { start: new Date(2000, 0, 1) });\n   * ```\n   *\n   * The URL will serialize to: `/search?start=2000-01-01`.\n   *\n   * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n   *\n   * - `date.getFullYear() === 2016`\n   * - `date.getMonth() === 11` (month is 0-based)\n   * - `date.getDate() === 25`\n   */\n  static date: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `json`\n   *\n   * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n   *\n   * #### Example:\n   * This example serializes an plain javascript object to the URL\n   * ```js\n   * .state({\n   *   name: 'map',\n   *   url: '/map/{coords:json}'\n   * });\n   * ```\n   * ```js\n   * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n   * ```\n   *\n   * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n   */\n  static json: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `any`\n   *\n   * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n   * This type does not encode or decode.\n   * It is compared using a deep `equals` comparison.\n   *\n   * #### Example:\n   * This example defines a non-url parameter on a [[StateDeclaration]].\n   * ```js\n   * .state({\n   *   name: 'new',\n   *   url: '/new',\n   *   params: {\n   *     inrepyto: null\n   *   }\n   * });\n   * ```\n   * ```js\n   * $state.go('new', { inreplyto: currentMessage });\n   * ```\n   */\n  static any: ParamTypeDefinition;\n\n  /** @hidden */\n  types: any;\n  /** @hidden */\n  enqueue = true;\n  /** @hidden */\n  typeQueue: any[] = [];\n\n  /** @internalapi */\n  private defaultTypes: any = pick(ParamTypes.prototype, [\n    'hash',\n    'string',\n    'query',\n    'path',\n    'int',\n    'bool',\n    'date',\n    'json',\n    'any',\n  ]);\n\n  /** @internalapi */\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.types = {};\n  }\n\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n\n  /** @internalapi */\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      const type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\n/** @hidden */\nfunction initDefaultTypes() {\n  const makeDefaultType = def => {\n    const valToString = (val: any) => (val != null ? val.toString() : val);\n\n    const defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return extend({}, defaultTypeBase, def) as ParamTypeDefinition;\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function(val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => (val && 1) || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/,\n    }),\n\n    date: makeDefaultType({\n      encode: function(val: any) {\n        return !this.is(val)\n          ? undefined\n          : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n      },\n      decode: function(val: string) {\n        if (this.is(val)) return (<any>val) as Date;\n        const match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate'].reduce((acc, fn) => acc && l[fn]() === r[fn](), true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/,\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  });\n}\n\ninitDefaultTypes();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}