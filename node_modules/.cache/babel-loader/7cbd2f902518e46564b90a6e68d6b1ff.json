{"ast":null,"code":"/** @packageDocumentation @reactapi @module react_hooks */\nimport { useState } from 'react';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useRouter } from './useRouter';\n/**\n * A hook that returns the current state and parameter values.\n *\n * Each time the current state or parameter values change, the component will re-render with the new values.\n *\n * Example:\n * ```jsx\n * function CurrentState() {\n *   const { state, params } = useCurrentStateAndParams();\n *   return <span>{state.name} ({JSON.stringify(params)})</span>;\n * }\n * ```\n */\n\nexport function useCurrentStateAndParams() {\n  var globals = useRouter().globals;\n\n  var _a = useState({\n    state: globals.current,\n    params: globals.params\n  }),\n      stateData = _a[0],\n      setStateData = _a[1];\n\n  useOnStateChanged(function (state, params) {\n    return setStateData({\n      state: state,\n      params: params\n    });\n  });\n  return stateData;\n}","map":{"version":3,"sources":["@uirouter/react/hooks/useCurrentStateAndParams.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,QAAT,QAAyB,OAAzB;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,wBAAV,GAAkC;AACtC,MAAM,OAAO,GAAG,SAAS,GAAG,OAA5B;;AACM,MAAA,EAAA,GAAA,QAAA,CAAA;AAAA,IAAA,KAAA,EAAA,OAAA,CAAA,OAAA;AAAA,IAAA,MAAA,EAAA,OAAA,CAAA;AAAA,GAAA,CAAA;AAAA,MAAC,SAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAY,YAAA,GAAA,EAAA,CAAA,CAAA,CAAZ;;AACN,EAAA,iBAAiB,CAAC,UAAC,KAAD,EAAQ,MAAR,EAAc;AAAK,WAAA,YAAY,CAAC;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,MAAM,EAA5B;AAAa,KAAD,CAAZ;AAA+B,GAAnD,CAAjB;AAEA,SAAO,SAAP;AACD","sourcesContent":["/** @packageDocumentation @reactapi @module react_hooks */\nimport { useState } from 'react';\nimport { RawParams, StateDeclaration } from '@uirouter/core';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useRouter } from './useRouter';\n\n/**\n * A hook that returns the current state and parameter values.\n *\n * Each time the current state or parameter values change, the component will re-render with the new values.\n *\n * Example:\n * ```jsx\n * function CurrentState() {\n *   const { state, params } = useCurrentStateAndParams();\n *   return <span>{state.name} ({JSON.stringify(params)})</span>;\n * }\n * ```\n */\nexport function useCurrentStateAndParams(): { state: StateDeclaration; params: RawParams } {\n  const globals = useRouter().globals;\n  const [stateData, setStateData] = useState({ state: globals.current, params: globals.params as RawParams });\n  useOnStateChanged((state, params) => setStateData({ state, params }));\n\n  return stateData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}