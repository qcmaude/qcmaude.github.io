{"ast":null,"code":"/** @packageDocumentation @reactapi @module components */\nimport { isFunction } from '@uirouter/core';\nimport * as _classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { cloneElement, useCallback, useMemo } from 'react';\nimport { useSref } from '../hooks/useSref';\n/** @hidden */\n\nvar classNames = _classNames;\n/**\n * This component lets create links to router states, allowing the user to navigate through the application.\n * It works well together with `<a>` and `<button>` nodes.\n *\n * You can wrap your anchor/button and define the router state you want it to link to via props.\n * If the state has an associated URL, it will automatically generate and update the `href` attribute.\n * Cliking its children will trigger a state transition with the optional parameters.\n *\n * #### Example:\n * ```jsx\n * // state definition\n * const state = {\n *   name: 'catalog',\n *   url: '/shop/catalog?productId',\n *   component: Catalog\n * }\n *\n * // UISref component\n * <UISref to=\"catalog\" params={{productId:103}}>\n *   <a>Product 103</a>\n * </UISref>\n *\n * // rendered dom\n * <a href=\"#/shop/catalog?productId=103\">Product 103</a>\n * ```\n *\n * It will also respect the default behavior when the user Cmd+Click / Ctrl+Click on the link by canceling the transition event and opening a new tab instead.\n */\n\nexport var UISref = function (_a) {\n  var children = _a.children,\n      className = _a.className,\n      options = _a.options,\n      params = _a.params,\n      to = _a.to;\n\n  var _b = useSref(to, params, options),\n      onClick = _b.onClick,\n      href = _b.href;\n\n  var childrenProps = children.props;\n  var handleClick = useCallback(function (e) {\n    var childOnClick = childrenProps.onClick;\n\n    if (isFunction(childOnClick)) {\n      childOnClick(e);\n    }\n\n    onClick(e);\n  }, [childrenProps, onClick]);\n  var props = useMemo(function () {\n    return Object.assign({}, childrenProps, {\n      onClick: handleClick,\n      href: href,\n      className: classNames(className, childrenProps.className)\n    });\n  }, [childrenProps, handleClick, href, className]);\n  return useMemo(function () {\n    return cloneElement(children, props);\n  }, [children, props]);\n};\nUISref.displayName = 'UISref';\nUISref.propTypes = {\n  children: PropTypes.element.isRequired,\n  to: PropTypes.string.isRequired,\n  params: PropTypes.object,\n  options: PropTypes.object,\n  className: PropTypes.string\n};\nUISref.defaultProps = {\n  params: {},\n  options: {},\n  className: null\n};","map":{"version":3,"sources":["@uirouter/react/components/UISref.tsx"],"names":[],"mappings":"AAAA;AACA,SAAS,UAAT,QAA8C,gBAA9C;AAEA,OAAO,KAAK,WAAZ,MAA6B,YAA7B;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAEA,SAAS,YAAT,EAAuB,WAAvB,EAAoC,OAApC,QAAmD,OAAnD;AACA,SAAS,OAAT,QAAwB,kBAAxB;AAEA;;AACA,IAAI,UAAU,GAAG,WAAjB;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;;AACH,OAAO,IAAM,MAAM,GAA0B,UAAC,EAAD,EAA6C;MAA1C,QAAA,GAAA,EAAA,CAAA,Q;MAAU,SAAA,GAAA,EAAA,CAAA,S;MAAW,OAAA,GAAA,EAAA,CAAA,O;MAAS,MAAA,GAAA,EAAA,CAAA,M;MAAQ,EAAA,GAAA,EAAA,CAAA,E;;AAC9E,MAAA,EAAA,GAAA,OAAA,CAAA,EAAA,EAAA,MAAA,EAAA,OAAA,CAAA;AAAA,MAAE,OAAA,GAAA,EAAA,CAAA,OAAF;AAAA,MAAW,IAAA,GAAA,EAAA,CAAA,IAAX;;AACN,MAAM,aAAa,GAAG,QAAQ,CAAC,KAA/B;AAEA,MAAM,WAAW,GAAG,WAAW,CAC7B,UAAA,CAAA,EAAC;AACC,QAAM,YAAY,GAAG,aAAa,CAAC,OAAnC;;AACA,QAAI,UAAU,CAAC,YAAD,CAAd,EAA8B;AAC5B,MAAA,YAAY,CAAC,CAAD,CAAZ;AACD;;AAED,IAAA,OAAO,CAAC,CAAD,CAAP;AACD,GAR4B,EAS7B,CAAC,aAAD,EAAgB,OAAhB,CAT6B,CAA/B;AAYA,MAAM,KAAK,GAAG,OAAO,CACnB,YAAA;AACE,WAAA,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAlB,EAAiC;AAC/B,MAAA,OAAO,EAAE,WADsB;AAE/B,MAAA,IAAI,EAAE,IAFyB;AAG/B,MAAA,SAAS,EAAE,UAAU,CAAC,SAAD,EAAY,aAAa,CAAC,SAA1B;AAHU,KAAjC,CAAA;AAIE,GANe,EAOnB,CAAC,aAAD,EAAgB,WAAhB,EAA6B,IAA7B,EAAmC,SAAnC,CAPmB,CAArB;AAUA,SAAO,OAAO,CAAC,YAAA;AAAM,WAAA,YAAY,CAAC,QAAD,EAAZ,KAAY,CAAZ;AAA6B,GAApC,EAAsC,CAAC,QAAD,EAAW,KAAX,CAAtC,CAAd;AACD,CA3BM;AA6BP,MAAM,CAAC,WAAP,GAAqB,QAArB;AAEA,MAAM,CAAC,SAAP,GAAmB;AACjB,EAAA,QAAQ,EAAE,SAAS,CAAC,OAAV,CAAkB,UADX;AAEjB,EAAA,EAAE,EAAE,SAAS,CAAC,MAAV,CAAiB,UAFJ;AAGjB,EAAA,MAAM,EAAE,SAAS,CAAC,MAHD;AAIjB,EAAA,OAAO,EAAE,SAAS,CAAC,MAJF;AAKjB,EAAA,SAAS,EAAE,SAAS,CAAC;AALJ,CAAnB;AAQA,MAAM,CAAC,YAAP,GAAsB;AACpB,EAAA,MAAM,EAAE,EADY;AAEpB,EAAA,OAAO,EAAE,EAFW;AAGpB,EAAA,SAAS,EAAE;AAHS,CAAtB","sourcesContent":["/** @packageDocumentation @reactapi @module components */\nimport { isFunction, TransitionOptions } from '@uirouter/core';\n\nimport * as _classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { cloneElement, useCallback, useMemo } from 'react';\nimport { useSref } from '../hooks/useSref';\n\n/** @hidden */\nlet classNames = _classNames;\n\nexport interface UISrefProps {\n  children?: any;\n  to: string;\n  params?: object;\n  options?: TransitionOptions;\n  className?: string;\n}\n\n/**\n * This component lets create links to router states, allowing the user to navigate through the application.\n * It works well together with `<a>` and `<button>` nodes.\n *\n * You can wrap your anchor/button and define the router state you want it to link to via props.\n * If the state has an associated URL, it will automatically generate and update the `href` attribute.\n * Cliking its children will trigger a state transition with the optional parameters.\n *\n * #### Example:\n * ```jsx\n * // state definition\n * const state = {\n *   name: 'catalog',\n *   url: '/shop/catalog?productId',\n *   component: Catalog\n * }\n *\n * // UISref component\n * <UISref to=\"catalog\" params={{productId:103}}>\n *   <a>Product 103</a>\n * </UISref>\n *\n * // rendered dom\n * <a href=\"#/shop/catalog?productId=103\">Product 103</a>\n * ```\n *\n * It will also respect the default behavior when the user Cmd+Click / Ctrl+Click on the link by canceling the transition event and opening a new tab instead.\n */\nexport const UISref: React.FC<UISrefProps> = ({ children, className, options, params, to }) => {\n  const { onClick, href } = useSref(to, params, options);\n  const childrenProps = children.props;\n\n  const handleClick = useCallback(\n    e => {\n      const childOnClick = childrenProps.onClick;\n      if (isFunction(childOnClick)) {\n        childOnClick(e);\n      }\n\n      onClick(e);\n    },\n    [childrenProps, onClick]\n  );\n\n  const props = useMemo(\n    () =>\n      Object.assign({}, childrenProps, {\n        onClick: handleClick,\n        href: href,\n        className: classNames(className, childrenProps.className),\n      }),\n    [childrenProps, handleClick, href, className]\n  );\n\n  return useMemo(() => cloneElement(children, props), [children, props]);\n};\n\nUISref.displayName = 'UISref';\n\nUISref.propTypes = {\n  children: PropTypes.element.isRequired,\n  to: PropTypes.string.isRequired,\n  params: PropTypes.object,\n  options: PropTypes.object,\n  className: PropTypes.string,\n};\n\nUISref.defaultProps = {\n  params: {},\n  options: {},\n  className: null,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}