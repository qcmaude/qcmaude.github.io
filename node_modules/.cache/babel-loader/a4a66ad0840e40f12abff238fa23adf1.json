{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BaseLocationServices } from './baseLocationService';\nimport { root, splitHash, splitQuery, stripLastPathElement } from '../common';\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\n\nvar PushStateLocationService =\n/** @class */\nfunction (_super) {\n  __extends(PushStateLocationService, _super);\n\n  function PushStateLocationService(router) {\n    var _this = _super.call(this, router, true) || this;\n\n    _this._config = router.urlService.config;\n    root.addEventListener('popstate', _this._listener, false);\n    return _this;\n  }\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n\n\n  PushStateLocationService.prototype._getBasePrefix = function () {\n    return stripLastPathElement(this._config.baseHref());\n  };\n\n  PushStateLocationService.prototype._get = function () {\n    var _a = this._location,\n        pathname = _a.pathname,\n        hash = _a.hash,\n        search = _a.search;\n    search = splitQuery(search)[1]; // strip ? if found\n\n    hash = splitHash(hash)[1]; // strip # if found\n\n    var basePrefix = this._getBasePrefix();\n\n    var exactBaseHrefMatch = pathname === this._config.baseHref();\n\n    var startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  };\n\n  PushStateLocationService.prototype._set = function (state, title, url, replace) {\n    var basePrefix = this._getBasePrefix();\n\n    var slash = url && url[0] !== '/' ? '/' : '';\n    var fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  };\n\n  PushStateLocationService.prototype.dispose = function (router) {\n    _super.prototype.dispose.call(this, router);\n\n    root.removeEventListener('popstate', this._listener);\n  };\n\n  return PushStateLocationService;\n}(BaseLocationServices);\n\nexport { PushStateLocationService };","map":{"version":3,"sources":["@uirouter/core/vanilla/pushStateLocationService.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @internalapi @module vanilla */\nimport { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\nimport { LocationConfig, root, splitHash, splitQuery, stripLastPathElement } from '../common';\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    root.addEventListener('popstate', this._listener, false);\n  }\n\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n  private _getBasePrefix() {\n    return stripLastPathElement(this._config.baseHref());\n  }\n\n  protected _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n\n    const basePrefix = this._getBasePrefix();\n    const exactBaseHrefMatch = pathname === this._config.baseHref();\n    const startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  }\n\n  protected _set(state: any, title: string, url: string, replace: boolean) {\n    const basePrefix = this._getBasePrefix();\n    const slash = url && url[0] !== '/' ? '/' : '';\n    const fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  }\n\n  public dispose(router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('popstate', this._listener);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}