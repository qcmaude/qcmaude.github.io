{"ast":null,"code":"/** @packageDocumentation @publicapi @module core */\n\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nvar Glob =\n/** @class */\nfunction () {\n  function Glob(text) {\n    this.text = text;\n    this.glob = text.split('.');\n    var regexpString = this.text.split('.').map(function (seg) {\n      if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n      if (seg === '*') return '\\\\.[^.]*';\n      return '\\\\.' + seg;\n    }).join('');\n    this.regexp = new RegExp('^' + regexpString + '$');\n  }\n  /** Returns true if the string has glob-like characters in it */\n\n\n  Glob.is = function (text) {\n    return !!/[!,*]+/.exec(text);\n  };\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n\n\n  Glob.fromString = function (text) {\n    return Glob.is(text) ? new Glob(text) : null;\n  };\n\n  Glob.prototype.matches = function (name) {\n    return this.regexp.test('.' + name);\n  };\n\n  return Glob;\n}();\n\nexport { Glob };","map":{"version":3,"sources":["@uirouter/core/common/glob.ts"],"names":[],"mappings":"AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CG;AACH,IAAA,IAAA;AAAA;AAAA,YAAA;AAeE,WAAA,IAAA,CAAY,IAAZ,EAAwB;AACtB,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,KAAL,CAAW,GAAX,CAAZ;AAEA,QAAM,YAAY,GAAG,KAAK,IAAL,CAClB,KADkB,CACZ,GADY,EAElB,GAFkB,CAEd,UAAA,GAAA,EAAG;AACN,UAAI,GAAG,KAAK,IAAZ,EAAkB,OAAO,oBAAP;AAClB,UAAI,GAAG,KAAK,GAAZ,EAAiB,OAAO,UAAP;AACjB,aAAO,QAAQ,GAAf;AACD,KANkB,EAOlB,IAPkB,CAOb,EAPa,CAArB;AASA,SAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,MAAM,YAAN,GAAqB,GAAhC,CAAd;AACD;AAxBD;;;AACO,EAAA,IAAA,CAAA,EAAA,GAAP,UAAU,IAAV,EAAsB;AACpB,WAAO,CAAC,CAAC,SAAS,IAAT,CAAc,IAAd,CAAT;AACD,GAFM;AAIP;;;AACO,EAAA,IAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA8B;AAC5B,WAAO,IAAI,CAAC,EAAL,CAAQ,IAAR,IAAgB,IAAI,IAAJ,CAAS,IAAT,CAAhB,GAAiC,IAAxC;AACD,GAFM;;AAoBP,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB;AAClB,WAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,MAAM,IAAvB,CAAP;AACD,GAFD;;AAGF,SAAA,IAAA;AAAC,CAlCD,EAAA","sourcesContent":["/** @packageDocumentation @publicapi @module core */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  /** Returns true if the string has glob-like characters in it */\n  static is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n  static fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    const regexpString = this.text\n      .split('.')\n      .map(seg => {\n        if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n        if (seg === '*') return '\\\\.[^.]*';\n        return '\\\\.' + seg;\n      })\n      .join('');\n\n    this.regexp = new RegExp('^' + regexpString + '$');\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}