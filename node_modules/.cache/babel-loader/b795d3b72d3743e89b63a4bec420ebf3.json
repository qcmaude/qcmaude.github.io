{"ast":null,"code":"/** @packageDocumentation @internalapi @module hooks */\n\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans) {\n  if (!trans.valid()) {\n    throw new Error(trans.error().toString());\n  }\n}\n\nexport var registerInvalidTransitionHook = function (transitionService) {\n  return transitionService.onBefore({}, invalidTransitionHook, {\n    priority: -10000\n  });\n};","map":{"version":3,"sources":["@uirouter/core/hooks/invalidTransition.ts"],"names":[],"mappings":"AAAA;;AAKA;;;;;;AAMG;AACH,SAAS,qBAAT,CAA+B,KAA/B,EAAgD;AAC9C,MAAI,CAAC,KAAK,CAAC,KAAN,EAAL,EAAoB;AAClB,UAAM,IAAI,KAAJ,CAAU,KAAK,CAAC,KAAN,GAAc,QAAd,EAAV,CAAN;AACD;AACF;;AAED,OAAO,IAAM,6BAA6B,GAAG,UAAC,iBAAD,EAAqC;AAChF,SAAA,iBAAiB,CAAC,QAAlB,CAA2B,EAA3B,EAA+B,qBAA/B,EAAsD;AAAE,IAAA,QAAQ,EAAE,CAAC;AAAb,GAAtD,CAAA;AAA2E,CADtE","sourcesContent":["/** @packageDocumentation @internalapi @module hooks */\n\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans: Transition) {\n  if (!trans.valid()) {\n    throw new Error(trans.error().toString());\n  }\n}\n\nexport const registerInvalidTransitionHook = (transitionService: TransitionService) =>\n  transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}