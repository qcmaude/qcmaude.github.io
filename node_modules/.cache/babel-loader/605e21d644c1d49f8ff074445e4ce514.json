{"ast":null,"code":"/** @packageDocumentation @reactapi @module react_hooks */\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n/** @hidden */\n\nfunction checkIfActive(router, stateName, params, relative, exact) {\n  return exact ? router.stateService.is(stateName, params, {\n    relative: relative\n  }) : router.stateService.includes(stateName, params, {\n    relative: relative\n  });\n}\n/**\n * A hook that returns true if a given state is active.\n *\n * Example:\n * ```jsx\n * function ContactsLabel() {\n *  const isActive = useIsActive('contacts');\n *  return <span className={isActive ? 'active' : 'inactive'}>Contacts></span>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function JoeLabel() {\n *  const isActive = useIsActive('contacts.contact', { contactId: 'joe' });\n *  return <span className={isActive ? 'active' : 'inactive'}>Joe></span>\n * }\n * ```\n *\n * @param stateName the name of the state to check.\n *        Relative state names such as '.child' are supported.\n *        Relative states are resolved relative to the state that rendered the hook.\n * @param params if present, the hook will only return true if all the provided parameter values match.\n * @param exact when true, the hook returns true only when the state matches exactly.\n *        when false, returns true if the state matches, or any child state matches.\n */\n\n\nexport function useIsActive(stateName, params, exact) {\n  if (params === void 0) {\n    params = null;\n  }\n\n  if (exact === void 0) {\n    exact = false;\n  }\n\n  var router = useRouter();\n  var relative = useParentView().context.name; // Don't re-compute initialIsActive on every render\n\n  var initialIsActive = useMemo(function () {\n    return checkIfActive(router, stateName, params, relative, exact);\n  }, []);\n\n  var _a = useState(initialIsActive),\n      isActive = _a[0],\n      setIsActive = _a[1];\n\n  var checkIfActiveChanged = function () {\n    var newIsActive = checkIfActive(router, stateName, params, relative, exact);\n\n    if (newIsActive !== isActive) {\n      setIsActive(newIsActive);\n    }\n  };\n\n  useOnStateChanged(checkIfActiveChanged);\n  useEffect(checkIfActiveChanged, [router, stateName, useDeepObjectDiff(params), exact]);\n  return isActive;\n}","map":{"version":3,"sources":["@uirouter/react/hooks/useIsActive.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,QAA6C,OAA7C;AAEA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;AACA,SAAS,aAAT,CAAuB,MAAvB,EAAyC,SAAzC,EAA4D,MAA5D,EAA4E,QAA5E,EAA8F,KAA9F,EAA4G;AAC1G,SAAO,KAAK,GACR,MAAM,CAAC,YAAP,CAAoB,EAApB,CAAuB,SAAvB,EAAkC,MAAlC,EAA0C;AAAE,IAAA,QAAQ,EAAA;AAAV,GAA1C,CADQ,GAER,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,SAA7B,EAAwC,MAAxC,EAAgD;AAAE,IAAA,QAAQ,EAAA;AAAV,GAAhD,CAFJ;AAGD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;;AACH,OAAM,SAAU,WAAV,CAAsB,SAAtB,EAAyC,MAAzC,EAAwD,KAAxD,EAAqE;AAA5B,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,IAAA;AAAa;;AAAE,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,KAAA;AAAa;;AACzE,MAAM,MAAM,GAAG,SAAS,EAAxB;AACA,MAAM,QAAQ,GAAG,aAAa,GAAG,OAAhB,CAAwB,IAAzC,CAFyE,CAGzE;;AACA,MAAM,eAAe,GAAG,OAAO,CAAC,YAAA;AAAM,WAAA,aAAa,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,EAA4B,QAA5B,EAAb,KAAa,CAAb;AAAyD,GAAhE,EAAkE,EAAlE,CAA/B;;AACM,MAAA,EAAA,GAAA,QAAA,CAAA,eAAA,CAAA;AAAA,MAAC,QAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAW,WAAA,GAAA,EAAA,CAAA,CAAA,CAAX;;AAEN,MAAM,oBAAoB,GAAG,YAAA;AAC3B,QAAM,WAAW,GAAG,aAAa,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,EAA4B,QAA5B,EAAsC,KAAtC,CAAjC;;AACA,QAAI,WAAW,KAAK,QAApB,EAA8B;AAC5B,MAAA,WAAW,CAAC,WAAD,CAAX;AACD;AACF,GALD;;AAOA,EAAA,iBAAiB,CAAC,oBAAD,CAAjB;AACA,EAAA,SAAS,CAAC,oBAAD,EAAuB,CAAC,MAAD,EAAS,SAAT,EAAoB,iBAAiB,CAAC,MAAD,CAArC,EAA+C,KAA/C,CAAvB,CAAT;AAEA,SAAO,QAAP;AACD","sourcesContent":["/** @packageDocumentation @reactapi @module react_hooks */\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { UIRouter } from '@uirouter/core';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n\n/** @hidden */\nfunction checkIfActive(router: UIRouter, stateName: string, params: object, relative: string, exact: boolean) {\n  return exact\n    ? router.stateService.is(stateName, params, { relative })\n    : router.stateService.includes(stateName, params, { relative });\n}\n\n/**\n * A hook that returns true if a given state is active.\n *\n * Example:\n * ```jsx\n * function ContactsLabel() {\n *  const isActive = useIsActive('contacts');\n *  return <span className={isActive ? 'active' : 'inactive'}>Contacts></span>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function JoeLabel() {\n *  const isActive = useIsActive('contacts.contact', { contactId: 'joe' });\n *  return <span className={isActive ? 'active' : 'inactive'}>Joe></span>\n * }\n * ```\n *\n * @param stateName the name of the state to check.\n *        Relative state names such as '.child' are supported.\n *        Relative states are resolved relative to the state that rendered the hook.\n * @param params if present, the hook will only return true if all the provided parameter values match.\n * @param exact when true, the hook returns true only when the state matches exactly.\n *        when false, returns true if the state matches, or any child state matches.\n */\nexport function useIsActive(stateName: string, params = null, exact = false) {\n  const router = useRouter();\n  const relative = useParentView().context.name;\n  // Don't re-compute initialIsActive on every render\n  const initialIsActive = useMemo(() => checkIfActive(router, stateName, params, relative, exact), []);\n  const [isActive, setIsActive] = useState(initialIsActive);\n\n  const checkIfActiveChanged = () => {\n    const newIsActive = checkIfActive(router, stateName, params, relative, exact);\n    if (newIsActive !== isActive) {\n      setIsActive(newIsActive);\n    }\n  };\n\n  useOnStateChanged(checkIfActiveChanged);\n  useEffect(checkIfActiveChanged, [router, stateName, useDeepObjectDiff(params), exact]);\n\n  return isActive;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}