{"ast":null,"code":"/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName) {\n  return function (transition, state) {\n    var _state = state.$$state();\n\n    var hookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\n\n\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexport var registerOnExitHook = function (transitionService) {\n  return transitionService.onExit({\n    exiting: function (state) {\n      return !!state.onExit;\n    }\n  }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\n\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexport var registerOnRetainHook = function (transitionService) {\n  return transitionService.onRetain({\n    retained: function (state) {\n      return !!state.onRetain;\n    }\n  }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\n\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexport var registerOnEnterHook = function (transitionService) {\n  return transitionService.onEnter({\n    entering: function (state) {\n      return !!state.onEnter;\n    }\n  }, onEnterHook);\n};","map":{"version":3,"sources":["@uirouter/core/hooks/onEnterExitRetain.ts"],"names":[],"mappings":"AAOA;;;;;;;AAOG;AACH,SAAS,uBAAT,CAAiC,QAAjC,EAAiD;AAC/C,SAAO,UAAC,UAAD,EAAyB,KAAzB,EAAgD;AACrD,QAAM,MAAM,GAAgB,KAAK,CAAC,OAAN,EAA5B;;AACA,QAAM,MAAM,GAA0B,MAAM,CAAC,QAAD,CAA5C;AACA,WAAO,MAAM,CAAC,UAAD,EAAa,KAAb,CAAb;AACD,GAJD;AAKD;AAED;;;;;;;;AAQG;;;AACH,IAAM,UAAU,GAA0B,uBAAuB,CAAC,QAAD,CAAjE;AACA,OAAO,IAAM,kBAAkB,GAAG,UAAC,iBAAD,EAAqC;AACrE,SAAA,iBAAiB,CAAC,MAAlB,CAAyB;AAAE,IAAA,OAAO,EAAE,UAAA,KAAA,EAAK;AAAI,aAAA,CAAC,CAAC,KAAK,CAAP,MAAA;AAAc;AAAlC,GAAzB,EAA+D,UAA/D,CAAA;AAA0E,CADrE;AAGP;;;;;;;;AAQG;;AACH,IAAM,YAAY,GAA0B,uBAAuB,CAAC,UAAD,CAAnE;AACA,OAAO,IAAM,oBAAoB,GAAG,UAAC,iBAAD,EAAqC;AACvE,SAAA,iBAAiB,CAAC,QAAlB,CAA2B;AAAE,IAAA,QAAQ,EAAE,UAAA,KAAA,EAAK;AAAI,aAAA,CAAC,CAAC,KAAK,CAAP,QAAA;AAAgB;AAArC,GAA3B,EAAoE,YAApE,CAAA;AAAiF,CAD5E;AAGP;;;;;;;;AAQG;;AACH,IAAM,WAAW,GAA0B,uBAAuB,CAAC,SAAD,CAAlE;AACA,OAAO,IAAM,mBAAmB,GAAG,UAAC,iBAAD,EAAqC;AACtE,SAAA,iBAAiB,CAAC,OAAlB,CAA0B;AAAE,IAAA,QAAQ,EAAE,UAAA,KAAA,EAAK;AAAI,aAAA,CAAC,CAAC,KAAK,CAAP,OAAA;AAAe;AAApC,GAA1B,EAAkE,WAAlE,CAAA;AAA8E,CADzE","sourcesContent":["/** @packageDocumentation @internalapi @module hooks */\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    const _state: StateObject = state.$$state();\n    const hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n  transitionService.onExit({ exiting: state => !!state.onExit }, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n  transitionService.onRetain({ retained: state => !!state.onRetain }, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n  transitionService.onEnter({ entering: state => !!state.onEnter }, onEnterHook);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}