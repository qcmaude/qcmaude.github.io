{"ast":null,"code":"/** @packageDocumentation @reactapi @module react_hooks */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { isString } from '@uirouter/core';\nimport { UISrefActiveContext } from '../components';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n/** @hidden */\n\nexport var IncorrectStateNameTypeError = \"The state name passed to useSref must be a string.\";\n/** @hidden Gets all StateDeclarations that are registered in the StateRegistry. */\n\nfunction useListOfAllStates(router) {\n  var initial = useMemo(function () {\n    return router.stateRegistry.get();\n  }, []);\n\n  var _a = useState(initial),\n      states = _a[0],\n      setStates = _a[1];\n\n  useEffect(function () {\n    return router.stateRegistry.onStatesChanged(function () {\n      return setStates(router.stateRegistry.get());\n    });\n  }, []);\n  return states;\n}\n/** @hidden Gets the StateDeclaration that this sref targets */\n\n\nfunction useTargetState(router, stateName, relative) {\n  // Whenever any states are added/removed from the registry, get the target state again\n  var allStates = useListOfAllStates(router);\n  return useMemo(function () {\n    return router.stateRegistry.get(stateName, relative);\n  }, [router, stateName, relative, allStates]);\n}\n/**\n * A hook to create a link to a state.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId });\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param options Transition options used when the onClick handler fires.\n */\n\n\nexport function useSref(stateName, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!isString(stateName)) {\n    throw new Error(IncorrectStateNameTypeError);\n  }\n\n  var router = useRouter(); // memoize the params object until the nested values actually change so they can be used as deps\n\n  var paramsMemo = useMemo(function () {\n    return params;\n  }, [useDeepObjectDiff(params)]);\n  var relative = useParentView().context.name;\n  var optionsMemo = useMemo(function () {\n    return __assign({\n      relative: relative,\n      inherit: true\n    }, options);\n  }, [relative, options]);\n  var targetState = useTargetState(router, stateName, relative); // Update href when the target StateDeclaration changes (in case the the state definition itself changes)\n  // This is necessary to handle things like future states\n\n  var href = useMemo(function () {\n    return router.stateService.href(stateName, paramsMemo, optionsMemo);\n  }, [router, stateName, paramsMemo, optionsMemo, targetState]);\n  var onClick = useCallback(function (e) {\n    if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      router.stateService.go(stateName, paramsMemo, optionsMemo);\n    }\n  }, [router, stateName, paramsMemo, optionsMemo]); // Participate in any parent UISrefActive\n\n  var parentUISrefActiveAddStateInfo = useContext(UISrefActiveContext);\n  useEffect(function () {\n    return parentUISrefActiveAddStateInfo(targetState && targetState.name, paramsMemo);\n  }, [targetState, paramsMemo]);\n  return {\n    onClick: onClick,\n    href: href\n  };\n}","map":{"version":3,"sources":["@uirouter/react/hooks/useSref.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @reactapi @module react_hooks */\n\nimport * as React from 'react';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { isString, StateDeclaration, TransitionOptions, UIRouter } from '@uirouter/core';\nimport { UISrefActiveContext } from '../components';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n\nexport interface LinkProps {\n  onClick: React.MouseEventHandler<any>;\n  href?: string;\n}\n\n/** @hidden */\nexport const IncorrectStateNameTypeError = `The state name passed to useSref must be a string.`;\n\n/** @hidden Gets all StateDeclarations that are registered in the StateRegistry. */\nfunction useListOfAllStates(router: UIRouter) {\n  const initial = useMemo(() => router.stateRegistry.get(), []);\n  const [states, setStates] = useState(initial);\n  useEffect(() => router.stateRegistry.onStatesChanged(() => setStates(router.stateRegistry.get())), []);\n  return states;\n}\n\n/** @hidden Gets the StateDeclaration that this sref targets */\nfunction useTargetState(router: UIRouter, stateName: string, relative: string): StateDeclaration {\n  // Whenever any states are added/removed from the registry, get the target state again\n  const allStates = useListOfAllStates(router);\n  return useMemo(() => {\n    return router.stateRegistry.get(stateName, relative);\n  }, [router, stateName, relative, allStates]);\n}\n\n/**\n * A hook to create a link to a state.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId });\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param options Transition options used when the onClick handler fires.\n */\nexport function useSref(stateName: string, params: object = {}, options: TransitionOptions = {}): LinkProps {\n  if (!isString(stateName)) {\n    throw new Error(IncorrectStateNameTypeError);\n  }\n\n  const router = useRouter();\n  // memoize the params object until the nested values actually change so they can be used as deps\n  const paramsMemo = useMemo(() => params, [useDeepObjectDiff(params)]);\n\n  const relative: string = useParentView().context.name;\n  const optionsMemo = useMemo(() => ({ relative, inherit: true, ...options }), [relative, options]);\n  const targetState = useTargetState(router, stateName, relative);\n  // Update href when the target StateDeclaration changes (in case the the state definition itself changes)\n  // This is necessary to handle things like future states\n  const href = useMemo(() => {\n    return router.stateService.href(stateName, paramsMemo, optionsMemo);\n  }, [router, stateName, paramsMemo, optionsMemo, targetState]);\n\n  const onClick = useCallback(\n    (e: React.MouseEvent) => {\n      if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        router.stateService.go(stateName, paramsMemo, optionsMemo);\n      }\n    },\n    [router, stateName, paramsMemo, optionsMemo]\n  );\n\n  // Participate in any parent UISrefActive\n  const parentUISrefActiveAddStateInfo = useContext(UISrefActiveContext);\n  useEffect(() => {\n    return parentUISrefActiveAddStateInfo(targetState && targetState.name, paramsMemo);\n  }, [targetState, paramsMemo]);\n\n  return { onClick, href };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}