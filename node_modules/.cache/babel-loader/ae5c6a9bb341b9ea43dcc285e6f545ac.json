{"ast":null,"code":"/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation @module common_hof\n */\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\n\n\nexport function curry(fn) {\n  return function curried() {\n    if (arguments.length >= fn.length) {\n      return fn.apply(this, arguments);\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    return curried.bind.apply(curried, __spreadArrays([this], args));\n  };\n}\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\n\nexport function compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function () {\n    var i = start,\n        result = args[start].apply(this, arguments);\n\n    while (i--) result = args[i].call(this, result);\n\n    return result;\n  };\n}\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\n\nexport function pipe() {\n  var funcs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    funcs[_i] = arguments[_i];\n  }\n\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\n\nexport var prop = function (name) {\n  return function (obj) {\n    return obj && obj[name];\n  };\n};\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\n\nexport var propEq = curry(function (name, _val, obj) {\n  return obj && obj[name] === _val;\n});\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\n\nexport var parse = function (name) {\n  return pipe.apply(null, name.split('.').map(prop));\n};\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\n\nexport var not = function (fn) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return !fn.apply(null, args);\n  };\n};\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\n\nexport function and(fn1, fn2) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return fn1.apply(null, args) && fn2.apply(null, args);\n  };\n}\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\n\nexport function or(fn1, fn2) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return fn1.apply(null, args) || fn2.apply(null, args);\n  };\n}\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\n\nexport var all = function (fn1) {\n  return function (arr) {\n    return arr.reduce(function (b, x) {\n      return b && !!fn1(x);\n    }, true);\n  };\n}; // tslint:disable-next-line:variable-name\n\nexport var any = function (fn1) {\n  return function (arr) {\n    return arr.reduce(function (b, x) {\n      return b || !!fn1(x);\n    }, false);\n  };\n};\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\n\nexport var is = function (ctor) {\n  return function (obj) {\n    return obj != null && obj.constructor === ctor || obj instanceof ctor;\n  };\n};\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\n\nexport var eq = function (value) {\n  return function (other) {\n    return value === other;\n  };\n};\n/** Given a value, returns a function which returns the value */\n\nexport var val = function (v) {\n  return function () {\n    return v;\n  };\n};\nexport function invoke(fnName, args) {\n  return function (obj) {\n    return obj[fnName].apply(obj, args);\n  };\n}\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\n\nexport function pattern(struct) {\n  return function (x) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}","map":{"version":3,"sources":["@uirouter/core/common/hof.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @packageDocumentation @module common_hof\n */\n\nimport { Predicate } from './common';\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  return function curried() {\n    if (arguments.length >= fn.length) {\n      return fn.apply(this, arguments);\n    }\n    const args = Array.prototype.slice.call(arguments);\n    return curried.bind(this, ...args);\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  const args = arguments;\n  const start = args.length - 1;\n  return function() {\n    let i = start,\n      result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) => (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, _val: any, obj: any) => obj && obj[name] === _val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) => pipe.apply(null, name.split('.').map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) => (...args: any[]) =>\n  !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) => (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\n\n// tslint:disable-next-line:variable-name\nexport const any = (fn1: Predicate<any>) => (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = <T>(ctor: { new (...args): T }) => (obj: any): obj is T =>\n  (obj != null && obj.constructor === ctor) || obj instanceof ctor;\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (value: any) => (other: any) => value === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T>(v: T) => () => v;\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) => obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (let i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}