{"ast":null,"code":"/** @packageDocumentation @reactapi @module components */\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { servicesPlugin } from '@uirouter/core';\nimport { UIRouterReact } from '../core';\n/**\n * This React Context component lets you access the UIRouter instance anywhere in the component tree\n *\n * When using hooks, use [[useRouter]] instead.\n *\n * #### Example:\n * ```jsx\n * <UIRouterContext.Consumer>\n *  {router => <MyComponent router={router} />}\n * </UIRouterContext.Consumer>\n * ```\n */\n\nexport var UIRouterContext = React.createContext(undefined);\n/** @deprecated use [[useRouter]] or React.useContext(UIRouterContext) */\n\nexport var UIRouterConsumer = UIRouterContext.Consumer;\n/** @hidden */\n\nexport var InstanceOrPluginsMissingError = \"Router instance or plugins missing.\\n You must either provide a location plugin via the plugins prop:\\n \\n <UIRouter plugins={[pushStateLocationPlugin]} states={[\\u00B7\\u00B7\\u00B7]}>\\n   <UIView />\\n </UIRouter>\\n \\n or initialize the router yourself and pass the instance via props:\\n \\n const router = new UIRouterReact();\\n router.plugin(pushStateLocationPlugin);\\n \\u00B7\\u00B7\\u00B7\\n <UIRouter router={router}>\\n   <UIView />\\n </UIRouter>\\n \";\n/**\n * This is the root UIRouter component, needed for initialising the router and setting up configuration properly.\n * Every other component from this library needs to be a descendant of `<\u001dUIRouter>`, so ideally you want to use it as root of your app.\n *\n * ### Config\n *\n * There are two ways to set up the router: you can either bootstrap it manually and pass the instance to the component,\n * or pass the necessary information and let the component do it for you.\n *\n * #### Component Setup (suggested)\n *\n * Setting up the router via this component is pretty straightforward:\n *\n * ```jsx\n * const Home = () => <div>Home</div>;\n *\n * const states = [{\n *   name: 'home'\u001c,\n *   component: Home,\n *   url: '/home'\n * }];\n *\n * const plugins = [pushStateLocationPlugin];\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * Optionally, you may want to access the router instance once to setup additional configuration, like registering [[TransitionHook]]s.\n * To do so, you may pass a `config` function that will be called with the newly created `router`\u001d instance as argument:\n *\n * ```jsx\n * const config = router => {\n *   // register home state as the intial one\n *   router.urlService.rules.initial({ state: 'home' });\n * }\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states} config={config}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * #### Manual Setup (advanced)\n * Alternatevely you may setup the router manually (i.e. exctracting the router configuration to another file).\n * You can do that by createing a new instance of the router and pass it to the component, this way the component will skip the previous props and just use the provided instance.\n *\n * > NB: since you are manually bootstrapping the router, you must register the servicesPlugin as well as the location plugin of your choice (in this example the [[pushStateLocationPlugin]]).\n *\n * ```jsx\n * const router = new UIRouterReact();\n * // activate plugins\n * router.plugin(servicesPlugin);\n * router.plugin(pushStateLocationPlugin);\n * // register states\n * router.stateRegistry.register(someState);\n * // start the router\n * router.start();\n *\n * ReactDOM.render(\n *   <UIRouter router={router}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById(\"root\")\n * );\n * ```\n */\n\nexport function UIRouter(props) {\n  var uiRouter = useRef();\n\n  var _a = useState(false),\n      started = _a[0],\n      setStarted = _a[1];\n\n  useEffect(function () {\n    if (!uiRouter.current) {\n      // Router hasn't been initialised yet, this is the first render\n      var config = props.config,\n          states = props.states,\n          plugins = props.plugins,\n          router = props.router;\n\n      if (router) {\n        uiRouter.current = router;\n      } else if (plugins) {\n        // We need to create a new instance of the Router and register plugins, config and states\n        uiRouter.current = new UIRouterReact();\n        uiRouter.current.plugin(servicesPlugin); // services plugins is necessary for the router to fuction\n\n        plugins.forEach(function (plugin) {\n          return uiRouter.current.plugin(plugin);\n        });\n        if (config) config(uiRouter.current);\n        (states || []).forEach(function (state) {\n          return uiRouter.current.stateRegistry.register(state);\n        });\n      } else {\n        throw new Error(InstanceOrPluginsMissingError);\n      }\n\n      uiRouter.current.start();\n      setStarted(true);\n    }\n  }, []);\n  return uiRouter.current ? React.createElement(UIRouterContext.Provider, {\n    value: uiRouter.current\n  }, props.children) : null;\n}","map":{"version":3,"sources":["@uirouter/react/components/UIRouter.tsx"],"names":[],"mappings":"AAAA;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,EAAoB,MAApB,EAA4B,QAA5B,QAA4C,OAA5C;AAEA,SAAgD,cAAhD,QAAqF,gBAArF;AAEA,SAAS,aAAT,QAA8B,SAA9B;AAGA;;;;;;;;;;;AAWG;;AACH,OAAO,IAAM,eAAe,GAAG,KAAK,CAAC,aAAN,CAA+B,SAA/B,CAAxB;AACP;;AACA,OAAO,IAAM,gBAAgB,GAAG,eAAe,CAAC,QAAzC;AAUP;;AACA,OAAO,IAAM,6BAA6B,GAAG,mcAAtC;AAiBP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEG;;AACH,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAAuC;AAC3C,MAAM,QAAQ,GAAG,MAAM,EAAvB;;AACM,MAAA,EAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AAAA,MAAC,OAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAU,UAAA,GAAA,EAAA,CAAA,CAAA,CAAV;;AAEN,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,QAAQ,CAAC,OAAd,EAAuB;AACrB;AACQ,UAAA,MAAA,GAAA,KAAA,CAAA,MAAA;AAAA,UAAQ,MAAA,GAAA,KAAA,CAAA,MAAR;AAAA,UAAgB,OAAA,GAAA,KAAA,CAAA,OAAhB;AAAA,UAAyB,MAAA,GAAA,KAAA,CAAA,MAAzB;;AACR,UAAI,MAAJ,EAAY;AACV,QAAA,QAAQ,CAAC,OAAT,GAAmB,MAAnB;AACD,OAFD,MAEO,IAAI,OAAJ,EAAa;AAClB;AACA,QAAA,QAAQ,CAAC,OAAT,GAAmB,IAAI,aAAJ,EAAnB;AACA,QAAA,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAwB,cAAxB,EAHkB,CAGuB;;AACzC,QAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAA,EAAM;AAAI,iBAAA,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAA,MAAA,CAAA;AAA+B,SAAzD;AACA,YAAI,MAAJ,EAAY,MAAM,CAAC,QAAQ,CAAC,OAAV,CAAN;AACZ,SAAC,MAAM,IAAI,EAAX,EAAe,OAAf,CAAuB,UAAA,KAAA,EAAK;AAAI,iBAAA,QAAQ,CAAC,OAAT,CAAiB,aAAjB,CAA+B,QAA/B,CAAA,KAAA,CAAA;AAA8C,SAA9E;AACD,OAPM,MAOA;AACL,cAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,MAAA,QAAQ,CAAC,OAAT,CAAiB,KAAjB;AACA,MAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GApBQ,EAoBN,EApBM,CAAT;AAsBA,SAAO,QAAQ,CAAC,OAAT,GACL,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB;AAAC,IAAA,KAAK,EAAE,QAAQ,CAAC;AAAjB,GAAzB,EAAoD,KAAK,CAAC,QAA1D,CADK,GAEH,IAFJ;AAGD","sourcesContent":["/** @packageDocumentation @reactapi @module components */\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { UIRouter as _UIRouter, UIRouterPlugin, servicesPlugin, PluginFactory } from '@uirouter/core';\n\nimport { UIRouterReact } from '../core';\nimport { ReactStateDeclaration } from '../interface';\n\n/**\n * This React Context component lets you access the UIRouter instance anywhere in the component tree\n *\n * When using hooks, use [[useRouter]] instead.\n *\n * #### Example:\n * ```jsx\n * <UIRouterContext.Consumer>\n *  {router => <MyComponent router={router} />}\n * </UIRouterContext.Consumer>\n * ```\n */\nexport const UIRouterContext = React.createContext<_UIRouter>(undefined);\n/** @deprecated use [[useRouter]] or React.useContext(UIRouterContext) */\nexport const UIRouterConsumer = UIRouterContext.Consumer;\n\nexport interface UIRouterProps {\n  plugins?: Array<PluginFactory<UIRouterPlugin>>;\n  states?: Array<ReactStateDeclaration>;\n  config?: (router: UIRouterReact) => void;\n  router?: UIRouterReact;\n  children: any;\n}\n\n/** @hidden */\nexport const InstanceOrPluginsMissingError = `Router instance or plugins missing.\n You must either provide a location plugin via the plugins prop:\n \n <UIRouter plugins={[pushStateLocationPlugin]} states={[···]}>\n   <UIView />\n </UIRouter>\n \n or initialize the router yourself and pass the instance via props:\n \n const router = new UIRouterReact();\n router.plugin(pushStateLocationPlugin);\n ···\n <UIRouter router={router}>\n   <UIView />\n </UIRouter>\n `;\n\n/**\n * This is the root UIRouter component, needed for initialising the router and setting up configuration properly.\n * Every other component from this library needs to be a descendant of `<\u001dUIRouter>`, so ideally you want to use it as root of your app.\n *\n * ### Config\n *\n * There are two ways to set up the router: you can either bootstrap it manually and pass the instance to the component,\n * or pass the necessary information and let the component do it for you.\n *\n * #### Component Setup (suggested)\n *\n * Setting up the router via this component is pretty straightforward:\n *\n * ```jsx\n * const Home = () => <div>Home</div>;\n *\n * const states = [{\n *   name: 'home'\u001c,\n *   component: Home,\n *   url: '/home'\n * }];\n *\n * const plugins = [pushStateLocationPlugin];\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * Optionally, you may want to access the router instance once to setup additional configuration, like registering [[TransitionHook]]s.\n * To do so, you may pass a `config` function that will be called with the newly created `router`\u001d instance as argument:\n *\n * ```jsx\n * const config = router => {\n *   // register home state as the intial one\n *   router.urlService.rules.initial({ state: 'home' });\n * }\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states} config={config}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * #### Manual Setup (advanced)\n * Alternatevely you may setup the router manually (i.e. exctracting the router configuration to another file).\n * You can do that by createing a new instance of the router and pass it to the component, this way the component will skip the previous props and just use the provided instance.\n *\n * > NB: since you are manually bootstrapping the router, you must register the servicesPlugin as well as the location plugin of your choice (in this example the [[pushStateLocationPlugin]]).\n *\n * ```jsx\n * const router = new UIRouterReact();\n * // activate plugins\n * router.plugin(servicesPlugin);\n * router.plugin(pushStateLocationPlugin);\n * // register states\n * router.stateRegistry.register(someState);\n * // start the router\n * router.start();\n *\n * ReactDOM.render(\n *   <UIRouter router={router}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById(\"root\")\n * );\n * ```\n */\nexport function UIRouter(props: UIRouterProps) {\n  const uiRouter = useRef<UIRouterReact>();\n  const [started, setStarted] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!uiRouter.current) {\n      // Router hasn't been initialised yet, this is the first render\n      const { config, states, plugins, router } = props;\n      if (router) {\n        uiRouter.current = router;\n      } else if (plugins) {\n        // We need to create a new instance of the Router and register plugins, config and states\n        uiRouter.current = new UIRouterReact();\n        uiRouter.current.plugin(servicesPlugin); // services plugins is necessary for the router to fuction\n        plugins.forEach(plugin => uiRouter.current.plugin(plugin));\n        if (config) config(uiRouter.current);\n        (states || []).forEach(state => uiRouter.current.stateRegistry.register(state));\n      } else {\n        throw new Error(InstanceOrPluginsMissingError);\n      }\n\n      uiRouter.current.start();\n      setStarted(true);\n    }\n  }, []);\n\n  return uiRouter.current ? (\n    <UIRouterContext.Provider value={uiRouter.current}>{props.children}</UIRouterContext.Provider>\n  ) : null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}