{"ast":null,"code":"/** @packageDocumentation @publicapi @module state */\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { removeFrom } from '../common/common';\nimport { propEq } from '../common/hof';\n\nvar StateRegistry =\n/** @class */\nfunction () {\n  /** @internalapi */\n  function StateRegistry(router) {\n    this.router = router;\n    this.states = {};\n    this.listeners = [];\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(router, this.states, this.builder, this.listeners);\n\n    this._registerRoot();\n  }\n  /** @internalapi */\n\n\n  StateRegistry.prototype._registerRoot = function () {\n    var rootStateDef = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': {\n          value: null,\n          type: 'hash',\n          dynamic: true\n        }\n      },\n      abstract: true\n    };\n\n    var _root = this._root = this.stateQueue.register(rootStateDef);\n\n    _root.navigable = null;\n  };\n  /** @internalapi */\n\n\n  StateRegistry.prototype.dispose = function () {\n    var _this = this;\n\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach(function (state) {\n      return _this.get(state) && _this.deregister(state);\n    });\n  };\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * #### Example:\n   * ```js\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n\n\n  StateRegistry.prototype.onStatesChanged = function (listener) {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  };\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[StateObject]]\n   */\n\n\n  StateRegistry.prototype.root = function () {\n    return this._root;\n  };\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDeclaration]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[StateObject]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n\n\n  StateRegistry.prototype.register = function (stateDefinition) {\n    return this.stateQueue.register(stateDefinition);\n  };\n  /** @hidden */\n\n\n  StateRegistry.prototype._deregisterTree = function (state) {\n    var _this = this;\n\n    var all = this.get().map(function (s) {\n      return s.$$state();\n    });\n\n    var getChildren = function (states) {\n      var _children = all.filter(function (s) {\n        return states.indexOf(s.parent) !== -1;\n      });\n\n      return _children.length === 0 ? _children : _children.concat(getChildren(_children));\n    };\n\n    var children = getChildren([state]);\n    var deregistered = [state].concat(children).reverse();\n    deregistered.forEach(function (_state) {\n      var rulesApi = _this.router.urlService.rules; // Remove URL rule\n\n      rulesApi.rules().filter(propEq('state', _state)).forEach(function (rule) {\n        return rulesApi.removeRule(rule);\n      }); // Remove state from registry\n\n      delete _this.states[_state.name];\n    });\n    return deregistered;\n  };\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {StateObject[]} a list of removed states\n   */\n\n\n  StateRegistry.prototype.deregister = function (stateOrName) {\n    var _state = this.get(stateOrName);\n\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n\n    var deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(function (listener) {\n      return listener('deregistered', deregisteredStates.map(function (s) {\n        return s.self;\n      }));\n    });\n    return deregisteredStates;\n  };\n\n  StateRegistry.prototype.get = function (stateOrName, base) {\n    var _this = this;\n\n    if (arguments.length === 0) return Object.keys(this.states).map(function (name) {\n      return _this.states[name].self;\n    });\n    var found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  };\n\n  StateRegistry.prototype.decorator = function (name, func) {\n    return this.builder.builder(name, func);\n  };\n\n  return StateRegistry;\n}();\n\nexport { StateRegistry };","map":{"version":3,"sources":["@uirouter/core/state/stateRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module state */\n\nimport { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { BuilderFunction } from './stateBuilder';\nimport { StateOrName } from './interface';\nimport { removeFrom } from '../common/common';\nimport { UIRouter } from '../router';\nimport { propEq } from '../common/hof';\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStatesChanged]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: 'registered' | 'deregistered', states: StateDeclaration[]) => void;\n\nexport class StateRegistry {\n  private _root: StateObject;\n  private states: { [key: string]: StateObject } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n\n  /** @internalapi */\n  constructor(private router: UIRouter) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(router, this.states, this.builder, this.listeners);\n    this._registerRoot();\n  }\n\n  /** @internalapi */\n  private _registerRoot() {\n    const rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true },\n      },\n      abstract: true,\n    };\n\n    const _root = (this._root = this.stateQueue.register(rootStateDef));\n    _root.navigable = null;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach(state => this.get(state) && this.deregister(state));\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * #### Example:\n   * ```js\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[StateObject]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDeclaration]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[StateObject]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: _StateDeclaration): StateObject {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @hidden */\n  private _deregisterTree(state: StateObject) {\n    const all = this.get().map(s => s.$$state());\n    const getChildren = (states: StateObject[]) => {\n      const _children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return _children.length === 0 ? _children : _children.concat(getChildren(_children));\n    };\n\n    const children = getChildren([state]);\n    const deregistered: StateObject[] = [state].concat(children).reverse();\n\n    deregistered.forEach(_state => {\n      const rulesApi = this.router.urlService.rules;\n\n      // Remove URL rule\n      rulesApi\n        .rules()\n        .filter(propEq('state', _state))\n        .forEach(rule => rulesApi.removeRule(rule));\n\n      // Remove state from registry\n      delete this.states[_state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {StateObject[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    const _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    const deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener('deregistered', deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @param base the base state to use when stateOrName is relative.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) return <StateDeclaration[]>Object.keys(this.states).map(name => this.states[name].self);\n    const found = this.matcher.find(stateOrName, base);\n    return (found && found.self) || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}