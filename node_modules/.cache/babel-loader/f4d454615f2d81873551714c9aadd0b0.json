{"ast":null,"code":"/** @packageDocumentation  @reactapi @module react */\nimport { services, forEach, map, pick, ViewService } from '@uirouter/core';\n/**\n * This is a [[StateBuilder.builder]] function for react `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-react.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\n\nexport function reactViewsBuilder(state) {\n  var views = {},\n      viewsDefinitionObject;\n\n  if (!state.views) {\n    viewsDefinitionObject = {\n      $default: pick(state, ['component'])\n    };\n  } else {\n    viewsDefinitionObject = map(state.views, function (val, key) {\n      if (val.component) return val;\n      return {\n        component: val\n      };\n    });\n  }\n\n  forEach(viewsDefinitionObject, function (config, name) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n\n    if (Object.keys(config).length == 0) return;\n    config.$type = 'react';\n    config.$context = state;\n    config.$name = name;\n    var normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n    views[name] = config;\n  });\n  return views;\n}\n/** @internalapi */\n\nvar id = 0;\n/** @internalapi */\n\nvar ReactViewConfig =\n/** @class */\nfunction () {\n  function ReactViewConfig(path, viewDecl) {\n    this.path = path;\n    this.viewDecl = viewDecl;\n    this.loaded = true;\n    this.$id = id++;\n  }\n\n  ReactViewConfig.prototype.load = function () {\n    return services.$q.when(this);\n  };\n\n  return ReactViewConfig;\n}();\n\nexport { ReactViewConfig };","map":{"version":3,"sources":["@uirouter/react/reactViews.tsx"],"names":[],"mappings":"AAAA;AACA,SAAS,QAAT,EAAmB,OAAnB,EAA4B,GAA5B,EAAiC,IAAjC,EAA6D,WAA7D,QAA6F,gBAA7F;AAGA;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAA8C;AAClD,MAAI,KAAK,GAAG,EAAZ;AAAA,MACE,qBADF;;AAEA,MAAI,CAAC,KAAK,CAAC,KAAX,EAAkB;AAChB,IAAA,qBAAqB,GAAG;AAAE,MAAA,QAAQ,EAAE,IAAI,CAAC,KAAD,EAAQ,CAAC,WAAD,CAAR;AAAhB,KAAxB;AACD,GAFD,MAEO;AACL,IAAA,qBAAqB,GAAG,GAAG,CAAC,KAAK,CAAC,KAAP,EAAc,UAAC,GAAD,EAAW,GAAX,EAAc;AACrD,UAAI,GAAG,CAAC,SAAR,EAAmB,OAAO,GAAP;AACnB,aAAO;AAAE,QAAA,SAAS,EAAE;AAAb,OAAP;AACD,KAH0B,CAA3B;AAID;;AAED,EAAA,OAAO,CAAC,qBAAD,EAAwB,UAAS,MAAT,EAAiB,IAAjB,EAAqB;AAClD,IAAA,IAAI,GAAG,IAAI,IAAI,UAAf,CADkD,CACvB;;AAC3B,QAAI,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,IAA8B,CAAlC,EAAqC;AAErC,IAAA,MAAM,CAAC,KAAP,GAAe,OAAf;AACA,IAAA,MAAM,CAAC,QAAP,GAAkB,KAAlB;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AAEA,QAAI,UAAU,GAAG,WAAW,CAAC,qBAAZ,CAAkC,MAAM,CAAC,QAAzC,EAAmD,MAAM,CAAC,KAA1D,CAAjB;AACA,IAAA,MAAM,CAAC,WAAP,GAAqB,UAAU,CAAC,UAAhC;AACA,IAAA,MAAM,CAAC,oBAAP,GAA8B,UAAU,CAAC,mBAAzC;AAEA,IAAA,KAAK,CAAC,IAAD,CAAL,GAAc,MAAd;AACD,GAbM,CAAP;AAcA,SAAO,KAAP;AACD;AAED;;AACA,IAAI,EAAE,GAAG,CAAT;AAEA;;AACA,IAAA,eAAA;AAAA;AAAA,YAAA;AAIE,WAAA,eAAA,CAAmB,IAAnB,EAA4C,QAA5C,EAA0E;AAAvD,SAAA,IAAA,GAAA,IAAA;AAAyB,SAAA,QAAA,GAAA,QAAA;AAH5C,SAAA,MAAA,GAAkB,IAAlB;AACA,SAAA,GAAA,GAAc,EAAE,EAAhB;AAE8E;;AAE9E,EAAA,eAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,QAAQ,CAAC,EAAT,CAAY,IAAZ,CAAiB,IAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,eAAA;AAAC,CATD,EAAA","sourcesContent":["/** @packageDocumentation  @reactapi @module react */\nimport { services, forEach, map, pick, PathNode, ViewConfig, ViewService, StateObject } from '@uirouter/core';\nimport { ReactViewDeclaration } from './interface';\n\n/**\n * This is a [[StateBuilder.builder]] function for react `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-react.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\nexport function reactViewsBuilder(state: StateObject) {\n  let views = {},\n    viewsDefinitionObject;\n  if (!state.views) {\n    viewsDefinitionObject = { $default: pick(state, ['component']) };\n  } else {\n    viewsDefinitionObject = map(state.views, (val: any, key) => {\n      if (val.component) return val;\n      return { component: val };\n    });\n  }\n\n  forEach(viewsDefinitionObject, function(config, name) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = 'react';\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n/** @internalapi */\nlet id = 0;\n\n/** @internalapi */\nexport class ReactViewConfig implements ViewConfig {\n  loaded: boolean = true;\n  $id: number = id++;\n\n  constructor(public path: [PathNode], public viewDecl: ReactViewDeclaration) {}\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}