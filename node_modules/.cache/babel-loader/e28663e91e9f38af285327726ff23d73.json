{"ast":null,"code":"/** @packageDocumentation @publicapi @module url */\nimport { map, inherit, identity, unnest, tail, find, allTrueR, unnestR, arrayTuples } from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\nimport { defaults } from '../common';\n/** @hidden */\n\nfunction quoteRegExp(str, param) {\n  var surroundPattern = ['', ''],\n      result = str.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, '\\\\$&');\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n      break;\n\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:/(', ')|/)?'];\n      break;\n\n    default:\n      surroundPattern = [\"(\" + param.squash + \"|\", ')?'];\n      break;\n  }\n\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/** @hidden */\n\n\nvar memoizeTo = function (obj, _prop, fn) {\n  return obj[_prop] = obj[_prop] || fn();\n};\n/** @hidden */\n\n\nvar splitOnSlash = splitOnDelim('/');\n/** @hidden */\n\nvar defaultConfig = {\n  state: {\n    params: {}\n  },\n  strict: true,\n  caseInsensitive: true\n};\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\n\nvar UrlMatcher =\n/** @class */\nfunction () {\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param paramFactory A [[ParamFactory]] object\n   * @param config  A [[UrlMatcherCompileConfig]] configuration object\n   */\n  function UrlMatcher(pattern, paramTypes, paramFactory, config) {\n    var _this = this;\n    /** @hidden */\n\n\n    this._cache = {\n      path: [this]\n    };\n    /** @hidden */\n\n    this._children = [];\n    /** @hidden */\n\n    this._params = [];\n    /** @hidden */\n\n    this._segments = [];\n    /** @hidden */\n\n    this._compiled = [];\n    this.config = config = defaults(config, defaultConfig);\n    this.pattern = pattern; // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n\n    var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    var searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    var patterns = [];\n    var last = 0;\n    var matchArray;\n\n    var checkParamErrors = function (id) {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n      if (find(_this._params, propEq('id', id))) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    }; // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n\n\n    var matchDetails = function (m, isSearch) {\n      // IE[78] returns '' for unmatched groups instead of null\n      var id = m[2] || m[3];\n      var regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      var makeRegexpType = function (str) {\n        return inherit(paramTypes.type(isSearch ? 'query' : 'path'), {\n          pattern: new RegExp(str, _this.config.caseInsensitive ? 'i' : undefined)\n        });\n      };\n\n      return {\n        id: id,\n        regexp: regexp,\n        segment: pattern.substring(last, m.index),\n        type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp)\n      };\n    };\n\n    var details;\n    var segment; // tslint:disable-next-line:no-conditional-assignment\n\n    while (matchArray = placeholder.exec(pattern)) {\n      details = matchDetails(matchArray, false);\n      if (details.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(details.id);\n\n      this._params.push(paramFactory.fromPath(details.id, details.type, config.state));\n\n      this._segments.push(details.segment);\n\n      patterns.push([details.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n\n    segment = pattern.substring(last); // Find any search parameter names and remove them from the last segment\n\n    var i = segment.indexOf('?');\n\n    if (i >= 0) {\n      var search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0; // tslint:disable-next-line:no-conditional-assignment\n\n        while (matchArray = searchPlaceholder.exec(search)) {\n          details = matchDetails(matchArray, true);\n          checkParamErrors(details.id);\n\n          this._params.push(paramFactory.fromSearch(details.id, details.type, config.state));\n\n          last = placeholder.lastIndex; // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n\n    this._compiled = patterns.map(function (_pattern) {\n      return quoteRegExp.apply(null, _pattern);\n    }).concat(quoteRegExp(segment));\n  }\n  /** @hidden */\n\n\n  UrlMatcher.encodeDashes = function (str) {\n    // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, function (c) {\n      return \"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n  };\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n\n\n  UrlMatcher.pathSegmentsAndParams = function (matcher) {\n    var staticSegments = matcher._segments;\n\n    var pathParams = matcher._params.filter(function (p) {\n      return p.location === DefType.PATH;\n    });\n\n    return arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(unnestR, []).filter(function (x) {\n      return x !== '' && isDefined(x);\n    });\n  };\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n\n\n  UrlMatcher.queryParams = function (matcher) {\n    return matcher._params.filter(function (p) {\n      return p.location === DefType.SEARCH;\n    });\n  };\n  /**\n   * Compare two UrlMatchers\n   *\n   * This comparison function converts a UrlMatcher into static and dynamic path segments.\n   * Each static path segment is a static string between a path separator (slash character).\n   * Each dynamic segment is a path parameter.\n   *\n   * The comparison function sorts static segments before dynamic ones.\n   */\n\n\n  UrlMatcher.compare = function (a, b) {\n    /**\n     * Turn a UrlMatcher and all its parent matchers into an array\n     * of slash literals '/', string literals, and Param objects\n     *\n     * This example matcher matches strings like \"/foo/:param/tail\":\n     * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n     * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n     *\n     * Caches the result as `matcher._cache.segments`\n     */\n    var segments = function (matcher) {\n      return matcher._cache.segments = matcher._cache.segments || matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []).reduce(joinNeighborsR, []).map(function (x) {\n        return isString(x) ? splitOnSlash(x) : x;\n      }).reduce(unnestR, []);\n    };\n    /**\n     * Gets the sort weight for each segment of a UrlMatcher\n     *\n     * Caches the result as `matcher._cache.weights`\n     */\n\n\n    var weights = function (matcher) {\n      return matcher._cache.weights = matcher._cache.weights || segments(matcher).map(function (segment) {\n        // Sort slashes first, then static strings, the Params\n        if (segment === '/') return 1;\n        if (isString(segment)) return 2;\n        if (segment instanceof Param) return 3;\n      });\n    };\n    /**\n     * Pads shorter array in-place (mutates)\n     */\n\n\n    var padArrays = function (l, r, padVal) {\n      var len = Math.max(l.length, r.length);\n\n      while (l.length < len) l.push(padVal);\n\n      while (r.length < len) r.push(padVal);\n    };\n\n    var weightsA = weights(a),\n        weightsB = weights(b);\n    padArrays(weightsA, weightsB, 0);\n\n    var _pairs = arrayTuples(weightsA, weightsB);\n\n    var cmp, i;\n\n    for (i = 0; i < _pairs.length; i++) {\n      cmp = _pairs[i][0] - _pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  };\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n\n\n  UrlMatcher.prototype.append = function (url) {\n    this._children.push(url);\n\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null\n    };\n    return url;\n  };\n  /** @hidden */\n\n\n  UrlMatcher.prototype.isRoot = function () {\n    return this._cache.path[0] === this;\n  };\n  /** Returns the input pattern string */\n\n\n  UrlMatcher.prototype.toString = function () {\n    return this.pattern;\n  };\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n\n\n  UrlMatcher.prototype.exec = function (path, search, hash, options) {\n    var _this = this;\n\n    if (search === void 0) {\n      search = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var match = memoizeTo(this._cache, 'pattern', function () {\n      return new RegExp(['^', unnest(_this._cache.path.map(prop('_compiled'))).join(''), _this.config.strict === false ? '/?' : '', '$'].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n    if (!match) return null; // options = defaults(options, { isolate: false });\n\n    var allParams = this.parameters(),\n        pathParams = allParams.filter(function (param) {\n      return !param.isSearch();\n    }),\n        searchParams = allParams.filter(function (param) {\n      return param.isSearch();\n    }),\n        nPathSegments = this._cache.path.map(function (urlm) {\n      return urlm._segments.length - 1;\n    }).reduce(function (a, x) {\n      return a + x;\n    }),\n        values = {};\n\n    if (nPathSegments !== match.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n\n    function decodePathArray(paramVal) {\n      var reverseString = function (str) {\n        return str.split('').reverse().join('');\n      };\n\n      var unquoteDashes = function (str) {\n        return str.replace(/\\\\-/g, '-');\n      };\n\n      var split = reverseString(paramVal).split(/-(?!\\\\)/);\n      var allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (var i = 0; i < nPathSegments; i++) {\n      var param = pathParams[i];\n      var value = match[i + 1]; // if the param value matches a pre-replace pair, replace the value before decoding.\n\n      for (var j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n\n    searchParams.forEach(function (param) {\n      var value = search[param.id];\n\n      for (var j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n    if (hash) values['#'] = hash;\n    return values;\n  };\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n\n\n  UrlMatcher.prototype.parameters = function (opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map(function (matcher) {\n      return matcher._params;\n    }));\n  };\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n\n\n  UrlMatcher.prototype.parameter = function (id, opts) {\n    var _this = this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var findParam = function () {\n      for (var _i = 0, _a = _this._params; _i < _a.length; _i++) {\n        var param = _a[_i];\n        if (param.id === id) return param;\n      }\n    };\n\n    var parent = this._cache.parent;\n    return findParam() || opts.inherit !== false && parent && parent.parameter(id, opts) || null;\n  };\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n\n\n  UrlMatcher.prototype.validates = function (params) {\n    var validParamVal = function (param, val) {\n      return !param || param.validates(val);\n    };\n\n    params = params || {}; // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n\n    var paramSchema = this.parameters().filter(function (paramDef) {\n      return params.hasOwnProperty(paramDef.id);\n    });\n    return paramSchema.map(function (paramDef) {\n      return validParamVal(paramDef, params[paramDef.id]);\n    }).reduce(allTrueR, true);\n  };\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n\n\n  UrlMatcher.prototype.format = function (values) {\n    if (values === void 0) {\n      values = {};\n    } // Build the full path of UrlMatchers (including all parent UrlMatchers)\n\n\n    var urlMatchers = this._cache.path; // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n\n    var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(unnestR, []).map(function (x) {\n      return isString(x) ? x : getDetails(x);\n    }); // Extract the query params into a separate array\n\n    var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(unnestR, []).map(getDetails);\n\n    var isInvalid = function (param) {\n      return param.isValid === false;\n    };\n\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n    /**\n     * Given a Param, applies the parameter value, then returns detailed information about it\n     */\n\n\n    function getDetails(param) {\n      // Normalize to typed value\n      var value = param.value(values[param.id]);\n      var isValid = param.validates(value);\n      var isDefaultValue = param.isDefaultValue(value); // Check if we're in squash mode for the parameter\n\n      var squash = isDefaultValue ? param.squash : false; // Allow the Parameter's Type to encode the value\n\n      var encoded = param.type.encode(value);\n      return {\n        param: param,\n        value: value,\n        isValid: isValid,\n        isDefaultValue: isDefaultValue,\n        squash: squash,\n        encoded: encoded\n      };\n    } // Build up the path-portion from the list of static segments and parameters\n\n\n    var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x; // Otherwise, it's a ParamDetails.\n\n      var squash = x.squash,\n          encoded = x.encoded,\n          param = x.param; // If squash is === true, try to remove a slash from the path\n\n      if (squash === true) return acc.match(/\\/$/) ? acc.slice(0, -1) : acc; // If squash is a string, use the string for the param value\n\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n\n      if (encoded == null) return acc; // If this parameter value is an array, encode the value using encodeDashes\n\n      if (isArray(encoded)) return acc + map(encoded, UrlMatcher.encodeDashes).join('-'); // If the parameter type is \"raw\", then do not encodeURIComponent\n\n      if (param.raw) return acc + encoded; // Encode the value\n\n      return acc + encodeURIComponent(encoded);\n    }, ''); // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n\n    var queryString = queryParams.map(function (paramDetails) {\n      var param = paramDetails.param,\n          squash = paramDetails.squash,\n          encoded = paramDetails.encoded,\n          isDefaultValue = paramDetails.isDefaultValue;\n      if (encoded == null || isDefaultValue && squash !== false) return;\n      if (!isArray(encoded)) encoded = [encoded];\n      if (encoded.length === 0) return;\n      if (!param.raw) encoded = map(encoded, encodeURIComponent);\n      return encoded.map(function (val) {\n        return param.id + \"=\" + val;\n      });\n    }).filter(identity).reduce(unnestR, []).join('&'); // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n\n    return pathString + (queryString ? \"?\" + queryString : '') + (values['#'] ? '#' + values['#'] : '');\n  };\n  /** @hidden */\n\n\n  UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n  return UrlMatcher;\n}();\n\nexport { UrlMatcher };","map":{"version":3,"sources":["@uirouter/core/url/urlMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @publicapi @module url */\nimport { map, inherit, identity, unnest, tail, find, Obj, allTrueR, unnestR, arrayTuples } from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { RawParams } from '../params/interface';\nimport { UrlMatcherCompileConfig } from './interface';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\nimport { ParamType } from '../params';\nimport { defaults } from '../common';\nimport { ParamFactory } from './urlMatcherFactory';\n\n/** @hidden */\nfunction quoteRegExp(str: any, param?: any) {\n  let surroundPattern = ['', ''],\n    result = str.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, '\\\\$&');\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n      break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:/(', ')|/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?'];\n      break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj: Obj, _prop: string, fn: Function) => (obj[_prop] = obj[_prop] || fn());\n\n/** @hidden */\nconst splitOnSlash = splitOnDelim('/');\n\n/** @hidden */\ninterface UrlMatcherCache {\n  segments?: any[];\n  weights?: number[];\n  path?: UrlMatcher[];\n  parent?: UrlMatcher;\n  pattern?: RegExp;\n}\n\n/** @hidden */\ninterface MatchDetails {\n  id: string;\n  regexp: string;\n  segment: string;\n  type: ParamType;\n}\n\n/** @hidden */\nconst defaultConfig: UrlMatcherCompileConfig = {\n  state: { params: {} },\n  strict: true,\n  caseInsensitive: true,\n};\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: UrlMatcherCache = { path: [this] };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params: Param[] = [];\n  /** @hidden */\n  private _segments: string[] = [];\n  /** @hidden */\n  private _compiled: string[] = [];\n  /** @hidden */\n  private readonly config: UrlMatcherCompileConfig;\n\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /** @hidden */\n  static encodeDashes(str: string) {\n    // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(\n      /-/g,\n      c =>\n        `%5C%${c\n          .charCodeAt(0)\n          .toString(16)\n          .toUpperCase()}`\n    );\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    const staticSegments = matcher._segments;\n    const pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined))\n      .reduce(unnestR, [])\n      .filter(x => x !== '' && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n\n  /**\n   * Compare two UrlMatchers\n   *\n   * This comparison function converts a UrlMatcher into static and dynamic path segments.\n   * Each static path segment is a static string between a path separator (slash character).\n   * Each dynamic segment is a path parameter.\n   *\n   * The comparison function sorts static segments before dynamic ones.\n   */\n  static compare(a: UrlMatcher, b: UrlMatcher): number {\n    /**\n     * Turn a UrlMatcher and all its parent matchers into an array\n     * of slash literals '/', string literals, and Param objects\n     *\n     * This example matcher matches strings like \"/foo/:param/tail\":\n     * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n     * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n     *\n     * Caches the result as `matcher._cache.segments`\n     */\n    const segments = (matcher: UrlMatcher) =>\n      (matcher._cache.segments =\n        matcher._cache.segments ||\n        matcher._cache.path\n          .map(UrlMatcher.pathSegmentsAndParams)\n          .reduce(unnestR, [])\n          .reduce(joinNeighborsR, [])\n          .map(x => (isString(x) ? splitOnSlash(x) : x))\n          .reduce(unnestR, []));\n\n    /**\n     * Gets the sort weight for each segment of a UrlMatcher\n     *\n     * Caches the result as `matcher._cache.weights`\n     */\n    const weights = (matcher: UrlMatcher) =>\n      (matcher._cache.weights =\n        matcher._cache.weights ||\n        segments(matcher).map(segment => {\n          // Sort slashes first, then static strings, the Params\n          if (segment === '/') return 1;\n          if (isString(segment)) return 2;\n          if (segment instanceof Param) return 3;\n        }));\n\n    /**\n     * Pads shorter array in-place (mutates)\n     */\n    const padArrays = (l: any[], r: any[], padVal: any) => {\n      const len = Math.max(l.length, r.length);\n      while (l.length < len) l.push(padVal);\n      while (r.length < len) r.push(padVal);\n    };\n\n    const weightsA = weights(a),\n      weightsB = weights(b);\n    padArrays(weightsA, weightsB, 0);\n\n    const _pairs = arrayTuples(weightsA, weightsB);\n    let cmp, i;\n\n    for (i = 0; i < _pairs.length; i++) {\n      cmp = _pairs[i][0] - _pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param paramFactory A [[ParamFactory]] object\n   * @param config  A [[UrlMatcherCompileConfig]] configuration object\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, paramFactory: ParamFactory, config?: UrlMatcherCompileConfig) {\n    this.config = config = defaults(config, defaultConfig);\n    this.pattern = pattern;\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    const placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n    const patterns: any[][] = [];\n    let last = 0;\n    let matchArray: RegExpExecArray;\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id)))\n        throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean): MatchDetails => {\n      // IE[78] returns '' for unmatched groups instead of null\n      const id: string = m[2] || m[3];\n      const regexp: string = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      const makeRegexpType = str =>\n        inherit(paramTypes.type(isSearch ? 'query' : 'path'), {\n          pattern: new RegExp(str, this.config.caseInsensitive ? 'i' : undefined),\n        });\n\n      return {\n        id,\n        regexp,\n        segment: pattern.substring(last, m.index),\n        type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp),\n      };\n    };\n\n    let details: MatchDetails;\n    let segment: string;\n\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((matchArray = placeholder.exec(pattern))) {\n      details = matchDetails(matchArray, false);\n      if (details.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(details.id);\n      this._params.push(paramFactory.fromPath(details.id, details.type, config.state));\n      this._segments.push(details.segment);\n      patterns.push([details.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    const i = segment.indexOf('?');\n\n    if (i >= 0) {\n      const search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        // tslint:disable-next-line:no-conditional-assignment\n        while ((matchArray = searchPlaceholder.exec(search))) {\n          details = matchDetails(matchArray, true);\n          checkParamErrors(details.id);\n          this._params.push(paramFactory.fromSearch(details.id, details.type, config.state));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n    this._compiled = patterns.map(_pattern => quoteRegExp.apply(null, _pattern)).concat(quoteRegExp(segment));\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null,\n    };\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path[0] === this;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    const match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp(\n        [\n          '^',\n          unnest(this._cache.path.map(prop('_compiled'))).join(''),\n          this.config.strict === false ? '/?' : '',\n          '$',\n        ].join(''),\n        this.config.caseInsensitive ? 'i' : undefined\n      );\n    }).exec(path);\n\n    if (!match) return null;\n\n    // options = defaults(options, { isolate: false });\n\n    const allParams: Param[] = this.parameters(),\n      pathParams: Param[] = allParams.filter(param => !param.isSearch()),\n      searchParams: Param[] = allParams.filter(param => param.isSearch()),\n      nPathSegments = this._cache.path.map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n      values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1) throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(paramVal: string) {\n      const reverseString = (str: string) =>\n        str\n          .split('')\n          .reverse()\n          .join('');\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, '-');\n\n      const split = reverseString(paramVal).split(/-(?!\\\\)/);\n      const allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      const param: Param = pathParams[i];\n      let value: any | any[] = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values['#'] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map(matcher => matcher._params));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const findParam = () => {\n      for (const param of this._params) {\n        if (param.id === id) return param;\n      }\n    };\n\n    const parent = this._cache.parent;\n    return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) => !param || param.validates(val);\n\n    params = params || {};\n\n    // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n    const paramSchema = this.parameters().filter(paramDef => params.hasOwnProperty(paramDef.id));\n    return paramSchema.map(paramDef => validParamVal(paramDef, params[paramDef.id])).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    const urlMatchers = this._cache.path;\n\n    // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n    const pathSegmentsAndParams: Array<string | ParamDetails> = urlMatchers\n      .map(UrlMatcher.pathSegmentsAndParams)\n      .reduce(unnestR, [])\n      .map(x => (isString(x) ? x : getDetails(x)));\n\n    // Extract the query params into a separate array\n    const queryParams: Array<ParamDetails> = urlMatchers\n      .map(UrlMatcher.queryParams)\n      .reduce(unnestR, [])\n      .map(getDetails);\n\n    const isInvalid = (param: ParamDetails) => param.isValid === false;\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n\n    /**\n     * Given a Param, applies the parameter value, then returns detailed information about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      const value = param.value(values[param.id]);\n      const isValid = param.validates(value);\n      const isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      const squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      const encoded = param.type.encode(value);\n\n      return { param, value, isValid, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    const pathString = pathSegmentsAndParams.reduce((acc: string, x: string | ParamDetails) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a ParamDetails.\n      const { squash, encoded, param } = x;\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return acc.match(/\\/$/) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]>encoded, UrlMatcher.encodeDashes).join('-');\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string>encoded);\n    }, '');\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    const queryString = queryParams\n      .map((paramDetails: ParamDetails) => {\n        let { param, squash, encoded, isDefaultValue } = paramDetails;\n        if (encoded == null || (isDefaultValue && squash !== false)) return;\n        if (!isArray(encoded)) encoded = [<string>encoded];\n        if (encoded.length === 0) return;\n        if (!param.raw) encoded = map(<string[]>encoded, encodeURIComponent);\n\n        return (<string[]>encoded).map(val => `${param.id}=${val}`);\n      })\n      .filter(identity)\n      .reduce(unnestR, [])\n      .join('&');\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : '') + (values['#'] ? '#' + values['#'] : '');\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isValid: boolean;\n  isDefaultValue: boolean;\n  squash: boolean | string;\n  encoded: string | string[];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}