{"ast":null,"code":"/** @packageDocumentation @internalapi @module vanilla */\nimport { identity, unnestR, isArray, splitEqual, splitHash, splitQuery } from '../common';\nexport var keyValsToObjectR = function (accum, _a) {\n  var key = _a[0],\n      val = _a[1];\n\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val];\n  }\n\n  return accum;\n};\nexport var getParams = function (queryString) {\n  return queryString.split('&').filter(identity).map(splitEqual).reduce(keyValsToObjectR, {});\n};\nexport function parseUrl(url) {\n  var orEmptyString = function (x) {\n    return x || '';\n  };\n\n  var _a = splitHash(url).map(orEmptyString),\n      beforehash = _a[0],\n      hash = _a[1];\n\n  var _b = splitQuery(beforehash).map(orEmptyString),\n      path = _b[0],\n      search = _b[1];\n\n  return {\n    path: path,\n    search: search,\n    hash: hash,\n    url: url\n  };\n}\nexport var buildUrl = function (loc) {\n  var path = loc.path();\n  var searchObject = loc.search();\n  var hash = loc.hash();\n  var search = Object.keys(searchObject).map(function (key) {\n    var param = searchObject[key];\n    var vals = isArray(param) ? param : [param];\n    return vals.map(function (val) {\n      return key + '=' + val;\n    });\n  }).reduce(unnestR, []).join('&');\n  return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n};\nexport function locationPluginFactory(name, isHtml5, serviceClass, configurationClass) {\n  return function (uiRouter) {\n    var service = uiRouter.locationService = new serviceClass(uiRouter);\n    var configuration = uiRouter.locationConfig = new configurationClass(uiRouter, isHtml5);\n\n    function dispose(router) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return {\n      name: name,\n      service: service,\n      configuration: configuration,\n      dispose: dispose\n    };\n  };\n}","map":{"version":3,"sources":["@uirouter/core/vanilla/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/** @packageDocumentation @internalapi @module vanilla */\nimport {\n  LocationConfig,\n  LocationServices,\n  identity,\n  unnestR,\n  isArray,\n  splitEqual,\n  splitHash,\n  splitQuery,\n} from '../common';\nimport { UIRouter } from '../router';\n\nexport const keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val];\n  }\n  return accum;\n};\n\nexport const getParams = (queryString: string): any =>\n  queryString\n    .split('&')\n    .filter(identity)\n    .map(splitEqual)\n    .reduce(keyValsToObjectR, {});\n\nexport function parseUrl(url: string) {\n  const orEmptyString = x => x || '';\n  const [beforehash, hash] = splitHash(url).map(orEmptyString);\n  const [path, search] = splitQuery(beforehash).map(orEmptyString);\n\n  return { path, search, hash, url };\n}\n\nexport const buildUrl = (loc: LocationServices) => {\n  const path = loc.path();\n  const searchObject = loc.search();\n  const hash = loc.hash();\n\n  const search = Object.keys(searchObject)\n    .map(key => {\n      const param = searchObject[key];\n      const vals = isArray(param) ? param : [param];\n      return vals.map(val => key + '=' + val);\n    })\n    .reduce(unnestR, [])\n    .join('&');\n\n  return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n};\n\nexport function locationPluginFactory(\n  name: string,\n  isHtml5: boolean,\n  serviceClass: { new (uiRouter?: UIRouter): LocationServices },\n  configurationClass: { new (uiRouter?: UIRouter, isHtml5?: boolean): LocationConfig }\n) {\n  return function(uiRouter: UIRouter) {\n    const service = (uiRouter.locationService = new serviceClass(uiRouter));\n    const configuration = (uiRouter.locationConfig = new configurationClass(uiRouter, isHtml5));\n\n    function dispose(router: UIRouter) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return { name, service, configuration, dispose };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}