{"ast":null,"code":"/** @packageDocumentation @reactapi @module react_hooks */\nimport { useSref } from './useSref';\nimport { useIsActive } from './useIsActive';\n/**\n * A hook to create a link to a state and track its active status.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n * If the referenced state (and params) is active, then the activeClass is returned as the `className` prop.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n * - `className`: the activeClass parameter when the state (or any child state) is active, otherwise an empty string\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home', null, 'active');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId }, 'active');\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * This hook is a variation of the [[useSref]] hook.\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param activeClass A css class string to use when the state is active\n * @param options Transition options used when the onClick handler fires.\n */\n\nexport function useSrefActive(stateName, params, activeClass, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = useSref(stateName, params, options),\n      href = _a.href,\n      onClick = _a.onClick;\n\n  var isActive = useIsActive(stateName, params, false);\n  var className = isActive ? activeClass : '';\n  return {\n    href: href,\n    onClick: onClick,\n    className: className\n  };\n}","map":{"version":3,"sources":["@uirouter/react/hooks/useSrefActive.ts"],"names":[],"mappings":"AAAA;AAGA,SAAoB,OAApB,QAAmC,WAAnC;AACA,SAAS,WAAT,QAA4B,eAA5B;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCG;;AACH,OAAM,SAAU,aAAV,CACJ,SADI,EAEJ,MAFI,EAGJ,WAHI,EAIJ,OAJI,EAI2B;AAF/B,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,EAAA;AAAmB;;AAEnB,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA+B;;AAEzB,MAAA,EAAA,GAAA,OAAA,CAAA,SAAA,EAAA,MAAA,EAAA,OAAA,CAAA;AAAA,MAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,MAAQ,OAAA,GAAA,EAAA,CAAA,OAAR;;AACN,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,KAApB,CAA5B;AACA,MAAM,SAAS,GAAG,QAAQ,GAAG,WAAH,GAAiB,EAA3C;AACA,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,OAAO,EAAA,OAAf;AAAiB,IAAA,SAAS,EAAA;AAA1B,GAAP;AACD","sourcesContent":["/** @packageDocumentation @reactapi @module react_hooks */\n\nimport { TransitionOptions } from '@uirouter/core';\nimport { LinkProps, useSref } from './useSref';\nimport { useIsActive } from './useIsActive';\n\ninterface ActiveLinkProps extends LinkProps {\n  className: string;\n}\n\n/**\n * A hook to create a link to a state and track its active status.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n * If the referenced state (and params) is active, then the activeClass is returned as the `className` prop.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n * - `className`: the activeClass parameter when the state (or any child state) is active, otherwise an empty string\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home', null, 'active');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId }, 'active');\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * This hook is a variation of the [[useSref]] hook.\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param activeClass A css class string to use when the state is active\n * @param options Transition options used when the onClick handler fires.\n */\nexport function useSrefActive(\n  stateName: string,\n  params: object = {},\n  activeClass: string,\n  options: TransitionOptions = {}\n): ActiveLinkProps {\n  const { href, onClick } = useSref(stateName, params, options);\n  const isActive = useIsActive(stateName, params, false);\n  const className = isActive ? activeClass : '';\n  return { href, onClick, className };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}