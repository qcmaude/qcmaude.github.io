{"ast":null,"code":"/** @packageDocumentation @reactapi @module react_hooks */\nimport { useTransitionHook } from './useTransitionHook';\n/**\n * A hook that invokes the provided callback whenever the current state changes.\n *\n * The callback receives the [[StateDeclaration]] and parameter values of the new current state.\n *\n * Example:\n * ```jsx\n * function ShowCurrentState() {\n *   const [routerState, setRouterState] = useState('');\n *   useOnStateChanged((state) => setState(state.name);\n *   return <span>{routerState ? `state changed to ${routerState}` : null}</span>\n * }\n * ```\n *\n * @param onStateChangedCallback a callback that receives the new current state and parameter values\n */\n\nexport function useOnStateChanged(onStateChangedCallback) {\n  useTransitionHook('onSuccess', {}, function (trans) {\n    return onStateChangedCallback(trans.to(), trans.params('to'));\n  });\n}","map":{"version":3,"sources":["@uirouter/react/hooks/useOnStateChanged.ts"],"names":[],"mappings":"AAAA;AAGA,SAAS,iBAAT,QAAkC,qBAAlC;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,iBAAV,CAA4B,sBAA5B,EAAwG;AAC5G,EAAA,iBAAiB,CAAC,WAAD,EAAc,EAAd,EAAkB,UAAA,KAAA,EAAK;AAAI,WAAA,sBAAsB,CAAC,KAAK,CAAC,EAAN,EAAD,EAAa,KAAK,CAAC,MAAN,CAAnC,IAAmC,CAAb,CAAtB;AAAsD,GAAjF,CAAjB;AACD","sourcesContent":["/** @packageDocumentation @reactapi @module react_hooks */\n\nimport { RawParams, StateDeclaration } from '@uirouter/core';\nimport { useTransitionHook } from './useTransitionHook';\n\n/**\n * A hook that invokes the provided callback whenever the current state changes.\n *\n * The callback receives the [[StateDeclaration]] and parameter values of the new current state.\n *\n * Example:\n * ```jsx\n * function ShowCurrentState() {\n *   const [routerState, setRouterState] = useState('');\n *   useOnStateChanged((state) => setState(state.name);\n *   return <span>{routerState ? `state changed to ${routerState}` : null}</span>\n * }\n * ```\n *\n * @param onStateChangedCallback a callback that receives the new current state and parameter values\n */\nexport function useOnStateChanged(onStateChangedCallback: (state: StateDeclaration, params: RawParams) => void) {\n  useTransitionHook('onSuccess', {}, trans => onStateChangedCallback(trans.to(), trans.params('to')));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}